<?php
// $Id: vcard.module,v 1.17.2.19 2011/01/19 09:17:54 sanduhrs Exp $

/**
 * @file
 * vCard is a file format standard for electronic business cards.
 *
 * vCards are often attached to e-mail messages, but can be exchanged in other ways,
 * such as on the World Wide Web. (http://en.wikipedia.org/wiki/Vcard)
 *
 * This module creates downloadable vCards based on profile fields.
 * It is possible to output hCards (http://en.wikipedia.org/wiki/Hcard)
 * on a user's profile page via themeable function.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

/**
 * Implement hook_requirements().
 */
function vcard_requirements($phase) {
  $requirement = array();
  // Ensure translations don't break at install time
  $t = get_t();
  $init = _vcard_init();

  if ($phase === 'runtime') {
    $requirement['vcard'] = array(
      'title' => t('PEAR File_IMC or Contact_Vcard_Build'),
      'value' => $init ? t('Available.') : t('Not available.'),
      'description' => !$init ? t('Install !link1 or !link2 for vcard generation.', array(
        '!link1' => l('PEAR File_IMC', 'http://pear.php.net/package/File_IMC'),
        '!link2' => l('PEAR Contact_Vcard_Build package', 'http://pear.php.net/package/Contact_Vcard_Build'))
      ) : '',
      'severity' => $init ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
  }

  return $requirement;
}

/**
 * Implement hook_help().
 */
function vcard_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vcard':
      return t("
        <p>
        vCard automates the exchange of personal information typically found on a traditional business card. vCard is used in applications such as Internet mail, voice mail, Web browsers, telephony applications, call centers, video conferencing, PIMs (Personal Information Managers), PDAs (Personal Data Assistants), pagers, fax, office equipment, and smart cards. vCard information goes way beyond simple text, and includes elements like pictures, company logos, live Web addresses, and so on.
        </p>
        <p>
        Web browsers and !aggregation_tools can also extract and use vCard-like information when it is displayed on the page using !hcard - an embedded !microformat.
        Read the module's documentation for more information on how to add hCard support to your theme.
        </p>
        <pre>",
        array(
          '!aggregation_tools' => l('aggregation tools', 'https://addons.mozilla.org/en-US/firefox/addon/2240'),
          '!hcard' => l('hCard', 'http://microformats.org/wiki/hcard'),
          '!microformat' => l('microformat', 'http://microformats.org'),
        )
      );
      break;
    case 'admin/user/profile':
      return t("<p>
        For assistance setting up a default profile with common fields, visit
        <a href='!vcard_settings_link'>the VCard settings</a> which can preset an automatic profile definition.
      </p><p>
        To enable machine-readable <a href='!microformat_link'>microformats</a>
        for your profiles, see the <a href='!vcard_help_link'>vCard help</a> and README.
      </p>",
      array(
        '!vcard_settings_link' => url('admin/settings/vcard'),
        '!vcard_help_link' => url('admin/help/vcard'),
        '!microformat_link' => url('http://microformats.org'),
      )
    );
    case 'admin/settings/vcard':
      return t("
        Profile fields are added and administered on
        <a href='!profile_settings_link'>the Profile Configuration page</a>.
      ",
      array(
        '!profile_settings_link' => url('admin/user/profile'),
      )
    );
  }
}

/**
 * Implement hook_perm().
 *
 * @return an array of permissions
 */
function vcard_perm() {
  return array('administer vcard', 'have vcard', 'download vcard', 'download vcard with e-mail');
}

/**
 * Implement hook_menu().
 *
 * @return an array of menu items
 */
function vcard_menu() {
  $items = array();

  $items['admin/settings/vcard'] = array(
    'title' => 'vCard',
    'description' => 'Configure the profile field mappings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vcard_admin_settings'),
    'access arguments' => array('administer vcard'),
    'file' => 'vcard.admin.inc',
  );
  $items['user/%user/vcard'] = array(
    'title' => 'vcard',
    'type' => MENU_CALLBACK,
    'page callback' => 'vcard_fetch',
    'page arguments' => array(1),
    'access callback' => 'vcard_perm_check',
  );

  return $items;
}

/**
 * Check download permissions
 * Custom menu access callback
 *
 * @return boolean
 */
function vcard_perm_check() {
  if (user_access('download vcard') OR user_access('download vcard with e-mail')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implement hook_user().
 *
 * Adds a vcard icon and link to the user page
 */
function vcard_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'view':
    // Check permissions
    if (user_access('have vcard', $account) && vcard_perm_check() && _vcard_init()) {
      // Attach vCard to profile
      $display_link = variable_get('vcard_display_profile_link', 1);
      $display_hcard = variable_get('vcard_display_profile_hcard', 1);
      if ($display_link || $display_hcard) {
        $account->content['vcard'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('vCard'),
        );
      }
      if ($display_hcard) {
        $account->content['vcard']['hcard'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('hCard'),
          '#value' => theme('vcard', $account, FALSE),
          '#weight' => 5,
          '#attributes' => array('class' => 'vcard-hcard'),
        );
      }
      if ($display_link) {
        $account->content['vcard']['link'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Download'),
          '#value' => l(t('Download vcard'), 'user/' . $account->uid . '/vcard', array('absolute' => FALSE, 'html' => TRUE)),
          '#weight' => 10,
          '#attributes' => array('class' => 'vcard-link'),
        );
      }
    }
  }
}

/**
 * Implement hook_block().
 */
function vcard_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t("About the author (vCard)"),
      'region' => 'left',
      'cache' => BLOCK_CACHE_PER_PAGE,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $account = new stdClass();
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          $account = user_load($node->uid);
        }
        if (isset($account->uid)) {
          $block = array(
            'subject' => t('About the author'),
            'content' => theme('vcard', $account, FALSE),
          );
        }
        break;
    }
    return $block;
  }
}

/**
 * Retrieve a user's vcard
 *
 * @return a vcard object structure with formatted values in the fields
 */
function vcard_get($account) {
  $vcard_raw = vcard_get_raw($account);

  $vcard = _vcard_init();
  $vcard->addParam('ENCODING', '8BIT');

  if (isset($vcard_raw->picture)) {
    $filepath = file_create_url($vcard_raw->picture);
    $vcard->setPhoto($filepath);
    $vcard->addParam('VALUE', 'uri');
    $vcard->addParam('ENCODING', '8BIT');
  }

  if (isset($vcard_raw->givenname) && isset($vcard_raw->familyname)) {
    $givenname  = $vcard_raw->givenname;
    $familyname = $vcard_raw->familyname;

    $vcard->setName($familyname, $givenname, '', '', '');
    $vcard->addParam('ENCODING', '8BIT');
    $vcard->setFormattedName($givenname . ' ' . $familyname);
    $vcard->addParam('ENCODING', '8BIT');
  }
  else {
    $vcard->setName(check_plain($account->name), '', '', '', '');
    $vcard->addParam('ENCODING', '8BIT');
    $vcard->setFormattedname(check_plain($account->name));
    $vcard->addParam('ENCODING', '8BIT');
  }

  if (isset($vcard_raw->mail)) {
    $mail = check_plain($vcard_raw->mail);
    $vcard->addEmail($mail);
    $vcard->addParam('ENCODING', '8BIT');
  }
  $vcard->addNickname(check_plain($account->name));
  $vcard->addParam('ENCODING', '8BIT');

  // Birthday
  if (isset($vcard_raw->birthday)) {
    $birthday = $vcard_raw->birthday;

    if (is_array($birthday)) {
      $bday = $birthday['year'] . '-' . $birthday['month'] . '-' . $birthday['day'];
      $vcard->setBirthday($bday);
    }
    else {
      $vcard->setBirthday($birthday);
    }
  }
  $vcard->addParam('ENCODING', '8BIT');

  // Organization
  if (isset($vcard_raw->organization)) {
    $vcard->addOrganization($vcard_raw->organization);
    $vcard->addParam('ENCODING', '8BIT');
  }

  // URL
  if (isset($vcard_raw->url)) {
    $vcard->setURL($vcard_raw->url);
    $vcard->addParam('ENCODING', '8BIT');
  }

  // Telephone
  if (isset($vcard_raw->telephone)) {
    $vcard->addTelephone($vcard_raw->telephone);
    $vcard->addParam('ENCODING', '8BIT');
  }

  // Address
  $street   = isset($vcard_raw->street)   ? $vcard_raw->street   : '';
  $city     = isset($vcard_raw->city)     ? $vcard_raw->city     : '';
  $province = isset($vcard_raw->province) ? $vcard_raw->province : '';
  $postal   = isset($vcard_raw->postal)   ? $vcard_raw->postal   : '';
  $country  = isset($vcard_raw->country)  ? $vcard_raw->country  : '';
  $vcard->addAddress('', '', $street, $city, $province, $postal, $country);
  $vcard->addParam('ENCODING', '8BIT');

  // Geo coordinates
  if (isset($vcard->location)) {
    if (isset($vcard->location['latitude']) && isset($vcard->location['longitude'])) {
      $vcard->setGeo($vcard->location['latitude'], $vcard->location['longitude']);
      $vcard->addParam('ENCODING', '8BIT');
    }
  }

  return $vcard;
}

/**
 * VCard for direct download
 *
 * Prints to the browser for direct download, then exits
 */
function vcard_fetch($account) {
  $vcard = vcard_get($account);
  $vcard_text = $vcard->fetch();
  if (!empty($vcard_text)) {
    header('Content-type: text/x-vcard');
    header('Content-Disposition: attachment; filename="' . uniqid() . '.vcf"');
    print $vcard_text;
    exit;
  }
  else {
    return t("Error building vcard");
  }
}

/**
 * Ensures the vcard PEAR library is available and returns the vCard builder
 * object.
 *
 * @return vCard object, null if library is not available.
 */
function _vcard_init() {
  if (@include_once('File/IMC.php')) {
    $vcard =& File_IMC::build('vCard', '3.0');
  }
  elseif (@include_once('Contact_Vcard_Build.php')) {
    $vcard = new Contact_Vcard_Build();
  }
  return empty($vcard) ? FALSE : $vcard;
}

/**
 *
 */
function _vcard_properties() {
  return array(
    'givenname'     => t('Given Name'),
    'familyname'    => t('Family name'),
    'birthday'      => t('Birthday'),
    'organization'  => t('Organization'),
    'telephone'     => t('Telephone'),
    'url'           => t('URL'),
    'street'        => t('Street'),
    'city'          => t('City'),
    'postal'        => t('Postal'),
    'province'      => t('Province'),
    'country'       => t('Country'),
  );
}

/**
 * Returns the list of field names => field labels available through
 * profile.module
 */
function _vcard_profile_fields($value = 'name') {
  $field_list = array();
  // Use the profile.module internals to retrieve an enumeration of available fields.
  // Avoid getting at the DB directly.
  $categories = profile_categories();
  foreach ($categories as $category_def) {
    $field_lookup = array();
    $result = _profile_get_fields($category_def['name']);
    while ($field = db_fetch_object($result)) {
      $field_lookup[] = $field;
    }
    foreach ($field_lookup as $field) {
      $field_list[$field->name] = $field->title;
    }
  }
  return $field_list;
}

/**
 * Returns an array of profilefield-to-vcard attribute fieldnames
 */
function _vcard_get_map($account) {
  $map = array();
  $profile_fields = _vcard_profile_fields();
  foreach ($profile_fields as $field_name => $field_label) {
    $mapped = variable_get('vcard_profile_' . $field_name, 0);
    if ($mapped) {
      $map[$mapped] = $account->{$field_name};
    }
  }
  return $map;
}

/**
 * Implementation of hook_theme().
 */
function vcard_theme($existing, $type, $theme, $path) {
  return array(
    'vcard' => array(
      'arguments' => array('account' => NULL, 'show_title' => TRUE),
      'template' => 'vcard',
    ),
  );
}

/**
 * Return one vCard property
 */
function vcard_get_raw_field($field, $account) {
  $vcard_raw = vcard_get_raw($account);
  return isset($vcard_raw[$account->uid]->{$field}) ? $vcard_raw[$account->uid]->{$field} : NULL;
}

/**
 * Assemble a raw vcard data structure
 */
function vcard_get_raw($account) {
  static $vcard_raw = array();

  if (empty($vcard_raw[$account->uid])) {
    $vcard_raw[$account->uid] = (object) _vcard_get_map($account);
    if ($account->picture) {
      $vcard_raw[$account->uid]->picture = $account->picture;
    }

    // Geolocation
    // TODO: Test with Location module
    if (isset($account->location) && $account->location['latitude'] && $account->location['longitude']) {
      $vcard[$account->uid]->location['latitude']  = $account->location['latitude'];
      $vcard[$account->uid]->location['longitude'] = $account->location['longitude'];
    }

    if (user_access('download vcard with e-mail')) {
      $vcard_raw[$account->uid]->mail = $account->mail;
    }
  }

  // Allow to alter the values
  drupal_alter('vcard_data', $vcard_raw[$account->uid], $account);
  return $vcard_raw[$account->uid];
}

/**
 * Process variables for vcard.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account: A user object with 'name', 'uid' and 'picture' fields.
 * - $show_title: A boolean to trigger the title.
 *
 * @see vcard.tpl.php
 */
function template_preprocess_vcard(&$variables) {
  $account = $variables['account'];

  $vcard_raw = vcard_get_raw($account);
  foreach ($vcard_raw as $key => $value) {
    // Sanitize data for possible html output
    if (is_string($value)) {
      $variables[$key] = $value;
    }
    elseif (is_array($value)) {
      foreach ($value as $key => $val) {
        $value[$key] = check_plain($val);
      }
    }
    else {
      // The only other thing  that should appear here is the user picture object,
      // Which is taken from the user object and already is sanitized
    }
  }

  // Prepare user picture
  $variables['user_picture'] = '';
  if (!empty($vcard_raw->picture)) {
    $filepath = $vcard_raw->picture;
    $alt = $title = t('Photo of @name', array('@name' => $account->name));
    if (variable_get('user_pictures', FALSE)) {
      //$variables['user_picture'] = theme('image', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt, 'attributes' => array('class' => 'photo'), 'getsize' => FALSE));
      $variables['user_picture'] = theme('image', $filepath, $title, $alt, array('class' => 'photo'), FALSE);
    }
  }

  $variables['account'] = $account;
  $variables['vcard']   = $vcard_raw;
}

