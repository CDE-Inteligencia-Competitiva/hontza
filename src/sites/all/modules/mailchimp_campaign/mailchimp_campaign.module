<?php

/**
 * Implementation of hook_perm().
 */
function mailchimp_campaign_perm() {
  return array('administer mailchimp campaigns', 'send mailchimp campaigns', 'view mailchimp statistics');
}

/**
 * Implementation of hook_menu().
 */
function mailchimp_campaign_menu() {
  $items = array();
  $items['node/%node/mailchimp/send'] = array(
    'title' => t('Send Campaign'),
    'page callback' => 'mailchimp_campaign_prepare',
    'page arguments' => array(1),
    'access callback' => '_mailchimp_campaign_send_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/mailchimp/results'] = array(
    'title' => t('Campaign Results'),
    'page callback' => 'mailchimp_campaign_results',
    'page arguments' => array(1),
    'access callback' => '_mailchimp_campaign_results_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['mailchimp/campaign/segment'] = array(
    'page callback' => 'mailchimp_campaign_segment_callback',
    'access arguments' => array('send mailchimp campaign'),
    'type' => MENU_CALLBACK,
  );
  $items['mailchimp/campaign/%ctools_js/view'] = array(
    'page callback' => 'mailchimp_campaign_view_content',
    'page arguments' => array(2),
    'access arguments' => array('send mailchimp campaigns'),
    'type' => MENU_CALLBACK,
  );
  $items['mailchimp/campaign/render'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'mailchimp_campaign_render_html',
    'access arguments' => array('send mailchimp campaigns'),
  );
  $items['admin/settings/mailchimp/campaign'] = array(
    'title' => t('Mailchimp Campaign settings'),
    'description' => t('Admin settings for Mailchimp Campaign module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_campaign_admin_settings'),
    'access arguments' => array('administer mailchimp campaigns'),
    'file' => 'mailchimp_campaign.admin.inc',
  ); 
  $items['admin/reports/campaigns'] = array(
    'title' => t('Mailchimp Campaigns'),
    'page callback' => 'mailchimp_campaign_admin_results',
    'access arguments' => array('view mailchimp statistics'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mailchimp_campaign.admin.inc',
  );
  return $items;
}

/**
 * Helper function to check access permissions for the send tab
 * @See: mailchimp_campaign_menu().
 */
function _mailchimp_campaign_send_access($node) {
  // Check if this content type has mailchimp sending capability and has not been sent.
  if (variable_get('mailchimp_campaign_type_' . $node->type, FALSE)) {
    if ($node->status && (user_access('send mailchimp campaigns'))) {
      // Only do a db query if we've got this far.
      $result = db_query('SELECT sent FROM {mailchimp_campaign} WHERE nid = "%d"', $node->nid);
      $row = db_fetch_array($result);
      if ($row['sent'] == 0) {
        // If this campaign has not been sent.
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Helper function to check access permissions for the results tab
 * @See: mailchimp_campaign_menu().
 */
function _mailchimp_campaign_results_access($node) {
  // Check if this content type has mailchimp sending capability and has been sent.
  if (variable_get('mailchimp_campaign_type_' . $node->type, FALSE)) {
    if ($node->status && (user_access('view mailchimp statistics'))) {
      // Only do a db query if we've got this far.
      $result = db_query('SELECT sent FROM {mailchimp_campaign} WHERE nid = "%d"', $node->nid);
      $row = db_fetch_array($result);
      if ($row['sent'] == 1) {
        // If this campaign has been sent.
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailchimp_campaign_form_node_type_form_alter(&$form, $form_state) {
  if (user_access('administer mailchimp campaigns')) {
    include_once(drupal_get_path('module', 'mailchimp_campaign') . '/includes/forms.inc');
    $form = mailchimp_campaign_get_node_type_form($form);
    $form['#submit'][] = 'mailchimp_campaign_node_type_form_submit';
  }
}

/**
 * Returns the send page and form.
 *
 * @todo see NOTE below
 */
function mailchimp_campaign_prepare($node) {
  $api = _mailchimp_campaign_api();

  drupal_add_js(array('mailchimp_campaign_token' => drupal_get_token()), 'setting'); // Add a token for our js callback
  drupal_add_js(drupal_get_path('module', 'mailchimp_campaign') . '/mailchimp_campaign.jquery.js');

  // Check what stage we're at
  $result = db_query('SELECT cid, sent, options FROM {mailchimp_campaign} WHERE nid = %d', $node->nid);
  $row = db_fetch_array($result);

  // TESTING CODE
  // Append ?test to the url on the /node/nid/mailchimp page to see some devel output.
  // This will be removed in final release.
  if (isset($_GET['test'])) {
    $options = unserialize($row['options']);
    dpm($options);
    $groups = $api->listInterestGroupings($options['mailchimp_campaign_list_id']);
    dpm($groups);
    $total = $api->campaignSegmentTest($options['mailchimp_campaign_list_id'], $opts);
    dpm($total);
    $opts = _mailchimp_campaign_prepare_options($options['mailchimp_campaign_segment'], $options['mailchimp_campaign_segment_match']);
    dpm($opts);
  }
  // /END TESTING CODE

  if ($row['cid'] && $row['sent'] != 0) {
    drupal_set_title('Campaign has been sent');
    // This campaign has already been sent so show results
    // $ret = $api->campaigns(array('campaign_id' => $row['cid'])); // Saved campaign details from Mailchimp.
    $output = mailchimp_campaign_results($node);
  }
  else if ($row['cid'] && $row['sent'] == 0) {
    // NOTE: wrapped this with condition check, but needs documentation on what it will do
    if (module_exists('dialog') && function_exists('dialog_add_js')) {
      dialog_add_js();
    }
    
    // This campaign has been created but not sent
    $ret = $api->campaigns(array('campaign_id' => $row['cid'])); // Saved campaign details from Mailchimp.
    $list = $api->listMembers($ret['data'][0]['list_id']); // Total amount of users in this list to be sent to.
    $options = unserialize($row['options']);
    // Check if we need to get segmentation details or whether we can get the whole list total.
    if (!empty($options['mailchimp_campaign_segment'])) {
      $opts = _mailchimp_campaign_prepare_options($options['mailchimp_campaign_segment'], $options['mailchimp_campaign_segment_match']);
      $total = $api->campaignSegmentTest($ret['data'][0]['list_id'], $opts);
    }
    else {
      $total = $list['total'];
    }
    include_once(drupal_get_path('module', 'mailchimp_campaign') . '/includes/forms.inc');
    $form = drupal_get_form('mailchimp_campaign_get_send_form', $row['cid']);
    drupal_set_title('Send campaign');
    $output = '<p>' . t('When you are ready to send the campaign click \'Send this campaign now\'.') . '</p><p>' .
    format_plural($total, 'The campaign will go out to 1 user.', 'The campaign will go out to @count users.') . '</p>';
    $output .= $form;
    $output .= drupal_get_form('mailchimp_campaign_get_prepared_form', $ret['data'][0]);
  }
  else {
    // This campaign needs preparing
    include_once(drupal_get_path('module', 'mailchimp_campaign') . '/includes/forms.inc');
    $node_type = $node->type;
    $form = drupal_get_form('mailchimp_campaign_get_options_form', $node_type, $node);
    // adjust the form
    $defaults = variable_get('mailchimp_campaign_options' . $node->type, FALSE);
    drupal_set_title('Prepare campaign settings');
    $output = '<p>' . t('Customise your settings for this campaign and when satisfied click the \'Create this campaign\'') . '. 
      A new campaign will be created for this content in Mailchimp but not sent until you click the send button on the next page.</p>';
    $output .= $form;
  }
  return $output;
}

/**
 * Submit handler for sending the campaign or storing the campaign details in the db.
 */
function mailchimp_campaign_prepare_submit($form, &$form_state) {
  $cid = NULL;
  $sent = NULL;
  $nid = $form_state['values']['nid'];
  // Save the form in the db for later use
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'mailchimp_campaign') === 0) {
      $options[$key] = $value;
    }
  }
  $data = array(
    'nid' => $nid,
    'cid' => $cid,
    'sent' => $sent,
    'options' => serialize($options),
  );

  // Check whether we are putting a new record in or updating an existing one.
  $result = db_query('SELECT nid FROM {mailchimp_campaign} WHERE nid = %d', $nid);
  $row = db_fetch_array($result);
  if ($row['nid']) {
    drupal_write_record('mailchimp_campaign', $data, 'nid');    
  }
  else {
    drupal_write_record('mailchimp_campaign', $data);
  }

  // If the prepare button was used
  if ($form_state['clicked_button']['#value'] == 'Prepare this campaign') {
    $node = node_load($nid);
    // Loop through the results and prepare them
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'mailchimp_campaign') === 0) {
        if ($key == 'mailchimp_campaign_subject' && $value == '') {
          $send_options['subject'] = $node->title;
        }
        if ($value) {
          $key = str_replace('mailchimp_campaign_', '', $key);
          if (strpos($key, 'template_') !== FALSE) {
            $send_options['template'] = TRUE;
          }
          // Sort the tracking elements out
          switch ($key) {
            case 'tracking':
              $tracking = array();
              foreach ($value as $key => $track) {
                if ($track !== 0) {
                  $tracking[$key] = 1;
                }
                else {
                  $tracking[$key] = 0;
                }
              }
              $send_options['tracking'] = $tracking;
              break;
            case 'analytics':
              $send_options['analytics'] = array('google' => $value);
              break;
            default:
              $send_options[$key] = $value;
              break;
          }
        }
      }
    }

    // Check if we're using a template and pull out the html_id from the options if it exists
    if ($send_options['template'] == TRUE && !$send_options['html_id']) {
      // There is a missing html_id needed
      drupal_set_message(t('Please specify where in the template your content will go. For example, enter something like html_std_content00 in the html_id field.'));
    }
    else {
      if ($send_options['template'] == TRUE) {
        $html_id = $send_options['html_id'];
      }
      else {
        $html_id = 'html';
      }
      // Prepare the mailchimp query
      $content[$html_id] = node_view($node, FALSE, TRUE, FALSE);
      // Allow other modules to alter the content before sending the campaign
      drupal_alter('mailchimp_campaign', $content);
      // dpm($send_options);
      // Pass this on to the send function
      // dpm($segment);
      $cid = mailchimp_campaign_create($send_options, $content);
      // If we succeeded in creating the campaign then store the results in the db
      if ($cid) {
        $data = array(
          'nid' => $nid,
          'cid' => $cid,
        );
        drupal_write_record('mailchimp_campaign', $data, 'nid');
      }
    }
  }
}

/**
 * Submit handler for sending a campaign.
 */
function mailchimp_campaign_send_submit($form, &$form_state) {
  $api = _mailchimp_campaign_api();
  $cid = $form_state['values']['cid'];
  // Load the options from the db
  $result = db_query('SELECT nid, cid, sent, options FROM {mailchimp_campaign} WHERE cid = "%s"', $cid);
  $row = db_fetch_array($result);

  if ($form_state['clicked_button']['#value'] == 'Send this campaign now') {
    // Send immediately.
    $ret = mailchimp_campaign_send($cid);
  }
  else if ($form_state['clicked_button']['#value'] == 'Re-prepare campaign') {
    // Delete from Mailchimp.
    $retval = $api->campaignDelete($cid);
    if ($api->errorCode) {
      drupal_set_message(t('Unable to delete the campaign in Mailchimp.'));
      drupal_set_message('Error code: ' . $api->errorCode);
      drupal_set_message('Message: ' . $api->errorMessage);
    } else {
      db_query('UPDATE {mailchimp_campaign} SET cid = 0 WHERE cid = "%s"', $cid); // Reset the cid
      drupal_set_message(t('Campaign removed from Mailchimp.'));
    }
  }
  else {
    // The user is sending a test email.
    $emails = explode(',', str_replace(' ', '', $form_state['values']['email']));

    $retval = $api->campaignSendTest($cid, $emails);
    if ($api->errorCode) {
      drupal_set_message(t('Unable to send test email(s).'));
      drupal_set_message('Error code: ' . $api->errorCode);
      drupal_set_message('Message: ' . $api->errorMessage);
    } else {
      drupal_set_message(t('Campaign was successfully emailed as a test to the address you specified.'));
    }
  }
}

/**
 * Creates the campaign using the provided options.
 */
function mailchimp_campaign_create($opts, $content, $segment = NULL, $type = 'regular') {
  $api = _mailchimp_campaign_api();

  if ($opts['segment']) {
    $segment = _mailchimp_campaign_prepare_options($opts['segment'], $opts['segment_match']);
    unset($opts['segment']);
    unset($opts['segment_match']);
  }
  // Right, lets try creating this sucker.
  $segment ? $cid = $api->campaignCreate($type, $opts, $content, $segment) : $cid = $api->campaignCreate($type, $opts, $content);
  // Check for errors.
  if ($api->errorCode) {
    drupal_set_message('Unable to create new campaign.');
    drupal_set_message('Error code: ' . $api->errorCode);
    drupal_set_message('Message: ' . $api->errorMessage);
  } else {
    drupal_set_message(t('Campaign was successfully created. You can send it now if you\'re ready.'));
    watchdog('mailchimp_campaign', 'New campaign created with cid: %cid', array('%cid => $cid'));
  }
  return $cid;
}

/**
 * Sends the campaign with the corresponding cid
 */
function mailchimp_campaign_send($cid) {
  // Make sure this campaign can only be sent once.
  $result = db_query('SELECT sent, nid FROM {mailchimp_campaign} WHERE cid = "%s"', $cid);
  $row = db_fetch_array($result);
  if ($row['sent']) {
    // This campaign has already been sent.
    drupal_set_message('This campaign has already been sent.');
  }
  else {
    // This campaign has never been sent.
    $api = _mailchimp_campaign_api();
     
    $retval = $api->campaignSendNow($cid);

    // Check for errors
    if ($api->errorCode) {
      drupal_set_message('Unable to send this campaign.');
      drupal_set_message('Error code: ' . $api->errorCode);
      drupal_set_message('Message: ' . $api->errorMessage);
    } else {
      db_query('UPDATE {mailchimp_campaign} SET sent = 1 WHERE cid = "%s"', $cid); // Set the sent bit
      drupal_set_message(t('Campaign was successfully sent.'));
      watchdog('mailchimp_campaign', 'Campaign sent with campaign id: %cid', array('%cid => $cid'));
      drupal_goto('node/' . $row['nid']);
    }
  }
  return $retval;
}

/**
 * Submit handler for the node type form.
 * Stores the results of the fields in a variable for this node type.
 */
function mailchimp_campaign_node_type_form_submit($form, &$form_state) {
  if ($form_state['values']['mailchimp_campaign_is_campaign_type']) {
    variable_set('mailchimp_campaign_type_' . $form_state['values']['type'], TRUE);
  }
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'mailchimp_campaign') === 0) {
      $options[$key] = $value;
    }
  }
  $options = serialize($options);
  // Store the defaults for this content type.
  variable_set('mailchimp_campaign_options_' . $form_state['values']['type'], $options);
}

/**
 * Gathers and return a page for the stats for a sent campaign.
 *
 * @return string Output showing campaign result data from Mailchimp
 */
function mailchimp_campaign_results($node) {
  drupal_add_css(drupal_get_path('module', 'mailchimp_campaign') . '/mailchimp_campaign.css');
  $api = _mailchimp_campaign_api();
  // Load the options from the db
  $result = db_query('SELECT cid, sent FROM {mailchimp_campaign} WHERE nid = %d', $node->nid);
  $row = db_fetch_array($result);
  $cid = $row['cid'];
  if ($row['sent'] != 1) {
    return t('This campaign has not been sent yet so there are no results to be shown.');
  }

  $output = '';

  $stats = $api->campaignStats($cid);
  $analytics = $api->campaignAnalytics($cid);
  $clickstats = $api->campaignClickStats($cid);

  if ($stats['emails_sent'] > 0) {
    $total = $stats['emails_sent'];
    $opens_percent = $stats['unique_opens'] / $total * 100;
    $users_clicked_percent = $stats['users_who_clicked'] / $total * 100;

    $output .= '<div id="campaign-stat-container"><h3>' . t('Campaign statistics') . '</h3>';
    $list = array(
      t('Successful sends: @sends', array('@sends' => $stats['emails_sent'])),
      t('Unique opens: @opens', array('@opens' => $stats['unique_opens'])),
      t('Forwarded: @forwards', array('@forwards' => $stats['forwards'])),
      t('Bounced: @bounced', array('@bounced' => $stats['hard_bounces'])),
      t('People who clicked: @pclicked', array('@pclicked' => $stats['unique_clicks'])),
      t('Total times opened: @opened', array('@opened' => $stats['opens'])),
      t('Total times clicked: @tclicked', array('@tclicked' => $stats['clicks'])),
    );
    $output .= theme_item_list($list);
    $output .= '</div>';

    // Prepare and plot a chart showing open and click rate
    $data = array(
      array(
        'label' => 'Opened',
        'data' => array(array(0, $opens_percent)),
        'color' => '#' . variable_get('mailchimp_campaign_colors_opens', '444444'),
        'bars' => array('show' => TRUE),
      ),
      array(
        'label' => 'Clicked',
        'data' => array(array(1.1, $users_clicked_percent)),
        'color' => '#' . variable_get('mailchimp_campaign_colors_clicks', '888888'),
        'bars' => array('show' => TRUE),
      )
    );
    $options = array(
      'xaxis' => array('ticks' => 0),
      'yaxis' => array('min' => 0, 'max' => 100, ),
      'grid' => array('borderWidth' => 0, 'borderColor' => NULL),
    );

    $output .= '<h3 id="flot-report-title">' . t('Percentage of users who:') . '</h3>';
    $output .= theme('flot_graph', array('style' => 'width:60%;height:200px;', 'id' => 'flot-report'), $data, $options);

    $output .= '<div id="click-stat-container"><h3>' . t('Click statistics') . '</h3>';
    $list = array();
    
    uasort($clickstats, create_function('$a, $b', 'if ($a["clicks"] == $b["clicks"]) return 0; return ($a["clicks"] > $b["clicks"]) ? -1 : 1;'));

    foreach ($clickstats as $link => $stat) {
      $sublist = array(
        'clicks' => t('Clicks: @clicks', array('@clicks' => $stat['clicks'])),
        'unique' => t('Unique clicks: @unique', array('@unique' => $stat['unique'])),
      );
      preg_match('|(http:\/\/.+?)(\?.*)|', $link, $matches);
      $list[] = l($matches[1], $matches[1]) . '<br/>' . $sublist['clicks'] . ' ' . $sublist['unique'];
    }
    $output .= theme_item_list($list);
    $output .= '</div>';
  }
  else {
    $output = '<p>' . t('This campaign is currently queued in Mailchimp\'s systems. Come back to this page once the emails have been sent out.') . '</p>';
  }
  return $output;
}

/**
 * A callback that returns the segment numbers for a segment test.
 *
 * @return string HTML containing the details of the segment results.
 */
function mailchimp_campaign_segment_callback() {
  $count = 0;
  $api = _mailchimp_campaign_api();

  if ($_POST['listid']) {
    $listid = $_POST['listid'];
    $passedconds = $_POST['conditions'];
    $match = $_POST['match'];
  }
  else if ($_GET['listid']) {
    $listid = $_GET['listid'];
    $passedconds = $_GET['conditions'];
    $match = $_GET['match'];
  }
  else {
    return t('No listid provided');
  }

  $opts = _mailchimp_campaign_prepare_options($passedconds, $match);
  
  // Ensure this call is safe
  if (!$_POST['from_js'] && $_GET['mailchimp_campaign_token'] == drupal_get_token()) {
    $count = $api->campaignSegmentTest($listid, $opts);
    if (!$count) {
      $count = 0;
    }
    return format_plural($count,
      'This segment configuration will send to 1 subscriber.', 
      'This segment configuration will send to @count subscribers.');
  }
  elseif ($_POST['from_js'] && $_POST['mailchimp_campaign_token'] == drupal_get_token()) {
    $count = $api->campaignSegmentTest($listid, $opts);
    $interests = $api->listInterestGroupings($listid);
    $groups = '<p>' . t('Groups associated with this list:') . '</p>';
    foreach($interests as $interest) {
      $groups .= '<div class="group"><strong>ID:</strong> ' . $interest['id'] . ' <strong>Name:</strong> ' . $interest['name'] . '</span>';
      $groups .= '<dl class="groups">';
      foreach ($interest['groups'] as $group) {
        $groups .= '<dt>Group name: ' . $group['name'] . '</dt>';
        $groups .= '<dd>Group subscribers: ' . $group['subscribers'] . '</dd>';
      }
      $groups .= '</dl>';
      $groups .= '</div>';
    }

    if (!$count) {
      $count = 0;
    }
    $ret = array(
      'message' => '<p><strong>' . format_plural($count,
      'This segment configuration will send to 1 subscriber.', 
      'This segment configuration will send to @count subscribers.') . '</strong></p>',
      'groups' => $groups,
    );
    // Set the text/javascript headers and
    // return the response in JSON format.
    drupal_json($ret);
    exit;
  }
  else {
    // Not a legitimate request
    drupal_json(array());
    exit;
  }
}

/**
 * Prepares and returns the campaign segmentation conditions ready for the API.
 *
 * @return array The options formatted as the API requires it
 */
function _mailchimp_campaign_prepare_options($passedconds, $match) {
  // Split the options out
  $line = explode("\n", $passedconds);
  foreach ($line as $set) {
    $conds = explode('|', $set);
    $conditions[] = array(
      'field' => $conds[0],
      'op' => $conds[1],
      'value' => str_replace('"', '', $conds[2]),
    );
  }
  $opts = array(
    'match' => $match,
    'conditions' => $conditions
  );
  return $opts;
}

/**
 * Menu callback returns rendered campaign in an iframe.
 *
 * @return string iframe containing campaign content.
 */
function mailchimp_campaign_view_content($ajax = FALSE, $cid) {
  if ($ajax) {
    $output = '<iframe width="100%" height="90%" src="' . base_path() . 'mailchimp/campaign/render/' . $cid . '"></iframe>';
    $options = array(
      'height' => 'auto',
      'width' => '800px',
      'position' => 'center',
    );
    dialog_ajax_render('Mailchimp Campaign content', $output, $options);
    return;
  }
  else {
    return '<iframe width="100%" height="100%" src="' . base_path() . 'mailchimp/campaign/render/' . $cid . '"></iframe>';
  }
}

/**
 * Menu callback to render the html for the campaign.
 *
 * @return string iframe containing campaign content. 
 */
function mailchimp_campaign_render_html($cid = FALSE) {
  if ($cid) {
    $api = _mailchimp_campaign_api();
    $content = $api->campaignContent($cid, FALSE);
    echo $content['html'];
  }
}


/**
 * Helper function to set up the api object.
 *
 * @return object mailchimp api
 */
function _mailchimp_campaign_api() {
  module_load_include('php', 'mailchimp_campaign', 'includes/MCAPI.class'); // Include Mailchimp's 1.3 API class
  $api = new MCAPI(variable_get('mailchimp_api_key', ''));
  return $api;
}
