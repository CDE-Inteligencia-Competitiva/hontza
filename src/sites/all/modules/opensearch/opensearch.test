<?php
// $Id: opensearch.test,v 1.1.2.10 2010/09/26 23:43:39 kiam Exp $

class OpenSearchTokensTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OpenSearch tokens',
      'description' => 'Test the search tokens.',
      'group' => 'OpenSearch',
    );
  }

  function setUp() {
    parent::setUp('search', 'token', 'opensearch', 'opensearch_token');
  }

  function testSearchTokens() {
    $modules = array('node', 'user');

    foreach ($modules as $module) {
      $expected = array();
      $test = '[search-module] [search-name] [search-name-lowercase] [search-opensearch-url] [search-url] [search-url-relative]';

      $expected[] = $module;
      $expected[] = module_invoke($module, 'search', 'name');
      $expected[] = drupal_strtolower(module_invoke($module, 'search', 'name'));
      $expected[] = url("opensearch/$module", array('absolute' => TRUE));
      $expected[] = url("search/$module", array('absolute' => TRUE));
      $expected[] = "search/$module";

      $expected = implode(' ', $expected);

      $result = token_replace($test, 'search', $module);

      $this->assertEqual($result, $expected, t('Search tokens for %module are correct.', array('%module' => $module)));
    }
  }
}

class OpenSearchFeedValidationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OpenSearch feed validation',
      'description' => 'Test the validity of the feeds generated by the Opensearch feed module.',
      'group' => 'OpenSearch',
    );
  }

  /**
   * Generates random strings.
   *
   * Differently from DrupalTestCase::randomString(), the strings are not
   * prefixed with a common prefix.
   *
   * @param $min_length
   *   The minimum length of the returned string.
   * @param $count
   *   The number of words to return.
   * @return
   *   An array containing random strings.
   */
  protected static function randomFakeWords($min_length, $count) {
    $vowels = array('a', 'e', 'i', 'o', 'u');
    $consonants = array(
      'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',
      'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'
    );
    $words = array();

    $num_consonants = count($consonants) - 1;
    $num_vowels = count($vowels) - 1;

    while ($count--) {
      $word = '';
      while (strlen($word) < $min_length) {
        switch(mt_rand(0, 2)) {
          case 2:
            $word .= $consonants[mt_rand(0, $num_consonants)];
          case 1:
            $word .= $vowels[mt_rand(0, $num_vowels)];
            break;

          case 0:
            $word .= $consonants[mt_rand(0, $num_consonants)];
            $word .= $vowels[mt_rand(0, $num_vowels)];
            $word .= $consonants[mt_rand(0, $num_consonants)];
        }
      }

      $words[] = $word;
    }

    return $words;
  }

  function setUp() {
    parent::setUp('search', 'opensearch');

    $this->account = $this->drupalCreateUser(array(
      'search content', 'administer search', 'access content', 'create page content'
    ));
  }

  function testNodeFeed() {
    $this->drupalLogin($this->account);

    // Create 10 nodes that have 20 words in common.
    $words = $this->randomFakeWords(8, 20);
    for ($i = 0; $i < 10; $i++) {
      $more_words = $this->randomFakeWords(6, 20);
      shuffle($words);
      $node = $this->drupalCreateNode(array(
        'body' => implode(' ', $words + $more_words),
      ));
    }

    // Replace this call with $this->cronRun() in the Drupal 7 version.
    search_cron();

    // Enable the OpenSearch node feed.
    variable_set('opensearch_enabled_types', array('node'));
    variable_set('opensearch_enabled_feeds', array('node'));

    $keyword = $words[mt_rand(0, 19)];

    $this->drupalGet("opensearch/node");
    if ($this->assertResponse(200, t('The Opensearch description has been retrieved.'))) {
      $this->assertPattern(
        '|<Description>[^<]*</Description>|i',
        t('The Opensearch description contains the feed description.')
      );
      $this->assertPattern(
        '|<Contact>[^<]*</Contact>|i',
        t('The Opensearch description contains the contact information.')
      );
      $this->assertPattern(
        '|<InputEncoding>[^<]*</InputEncoding>|i',
        t('The Opensearch description contains information about input encoding.')
      );
      $this->assertPattern(
        '|<OutputEncoding>[^<]*</OutputEncoding>|i',
        t('The Opensearch description contains information about output encoding.')
      );
    }

    $this->drupalGet("opensearch/node/$keyword");
    if ($this->assertResponse(200, t('The Opensearch feed has been retrieved.'))) {
      $result = $this->assertNoText(
        'You must include at least one positive keyword',
        t('The search page received the correct keyword to search for (%keyword).', array('%keyword' => $keyword))
      );
      if ($result) {
        $this->assertPattern(
          '|<title>[^<]*</title>|i',
          t('The Opensearch feed contains titles.')
        );
      }
    }
  }

  function testUserFeed() {
    $this->drupalLogin($this->account);

    for ($i = 0; $i < 10; $i++) {
      $user = $this->drupalCreateUser();
    }

    // Replace this call with $this->cronRun() in the Drupal 7 version.
    search_cron();

    // Enable the OpenSearch user feed.
    variable_set('opensearch_enabled_types', array('user'));
    variable_set('opensearch_enabled_feeds', array('user'));

    $this->drupalGet("opensearch/user");
    if ($this->assertResponse(200, t('The Opensearch description has been retrieved.'))) {
      $this->assertPattern(
        '|<Description>[^<]*</Description>|i',
        t('The Opensearch description contains the feed description.')
      );
      $this->assertPattern(
        '|<Contact>[^<]*</Contact>|i',
        t('The Opensearch description contains the contact information.')
      );
      $this->assertPattern(
        '|<InputEncoding>[^<]*</InputEncoding>|i',
        t('The Opensearch description contains information about input encoding.')
      );
      $this->assertPattern(
        '|<OutputEncoding>[^<]*</OutputEncoding>|i',
        t('The Opensearch description contains information about output encoding.')
      );
    }

    $this->drupalGet('opensearch/user/' . $user->name);
    if ($this->assertResponse(200, t('The Opensearch feed has been retrieved.'))) {
      $result = $this->assertNoText(
        'You must include at least one positive keyword',
        t('The search page received the correct keyword to search for (%keyword).', array('%keyword' => $user->name))
      );
      if ($result) {
        $this->assertPattern(
          '|<title>[^<]*</title>|i',
          t('The Opensearch feed contains titles.')
        );
      }
    }
  }
}
