<?php
// $Id: opensearch.module,v 1.10.4.57 2010/09/26 23:51:54 kiam Exp $

/**
 * @file
 * Allows Drupal search results to be returned in the OpenSearch RSS format.
 */


/**
 * Defines the API version currently implemented by the module.
 */
define('OPENSEARCH_API', '1.10');

/**
 * Implements hook_init().
 */
function opensearch_init() {
  if ($module = opensearch_is_search_page()) {
    if ($info = opensearch_type_load($module)) {
      // If this is a search-related page, add the OpenSearch link for the current
      // search routine.
      opensearch_add_opensearch_link($info);

      $keywords = trim(search_get_keys());
      if ($keywords) {
        $result_title = _opensearch_check_plain($info->settings['rss_title'], $module);

        $query = array();
        foreach ($_GET as $index => $value) {
          if ($index != 'q') {
            $query[$index] = $value;

            if ($index == 'page') {
              $query[$index]++;
            }
          }
        }

        $result_url = url(
          'opensearch/' . $module . '/' . drupal_urlencode($keywords),
          array('absolute' => TRUE, 'query' => $query)
        );
        drupal_add_feed($result_url, $result_title);
      }
    }
  }
  else {
    // On non-search pages, add links for all available OpenSearches.
    foreach (module_implements('search') as $module) {
      if ($info = opensearch_type_load($module)) {
        opensearch_add_opensearch_link($info);
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function opensearch_menu() {
  $search_content = array('search content');

  $items['opensearch/dismiss_warning/%'] = array(
    'page callback' => 'opensearch_dismiss_warning',
    'access arguments' => array('administer search'),
    'type' => MENU_CALLBACK,
    'file' => 'opensearch.admin.inc',
  );

  $items['opensearch/%opensearch_type'] = array(
    'page callback' => 'opensearch_description',
    'page arguments' => array(1),
    'access arguments' => $search_content,
    'type' => MENU_CALLBACK,
    'file' => 'opensearch.pages.inc',
  );

  $items['opensearch/%opensearch_type/%menu_tail'] = array(
    'page callback' => 'opensearch_view',
    'page arguments' => array(1),
    'access arguments' => $search_content,
    'type' => MENU_CALLBACK,
    'file' => 'opensearch.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function opensearch_menu_alter(&$items) {
  $administer_search = array('administer search');

  if (isset($items['admin/settings/search'])) {
    $items['admin/settings/search/search'] = array(
      'title' => 'Search',
      'access arguments' => $administer_search,
      'weight' => -1,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'file' => 'search.admin.inc',
      'file path' => drupal_get_path('module', 'search'),
    );

    $items['admin/settings/search/opensearch'] = array(
      'title' => 'OpenSearch',
      'description' => 'Allow search results to be returned in the OpenSearch RSS format.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('opensearch_admin_settings'),
      'access arguments' => $administer_search,
      'type' => MENU_LOCAL_TASK,
      'file' => 'opensearch.admin.inc',
      'file path' => drupal_get_path('module', 'opensearch'),
    );

    $items['admin/settings/search/opensearch/%opensearch_type'] = array(
      'title' => 'OpenSearch',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('opensearch_admin_type_settings', 4),
      'access arguments' => $administer_search,
      'type' => MENU_CALLBACK,
      'file' => 'opensearch.admin.inc',
      'file path' => drupal_get_path('module', 'opensearch'),
    );
  }
}

/**
 * Implements hook_theme().
 */
function opensearch_theme() {
  return array(
    'opensearch_description' => array(
      'arguments' => array('info' => NULL),
      'template' => 'opensearch-description',
    ),
    'opensearch_description_files' => array(
      'arguments' => array('form' => array()),
      'file' => 'opensearch.admin.inc',
    ),
  );
}

/**
 * Menu object load function.
 */
function opensearch_type_load($type) {
  if (!module_exists($type)) {
    return FALSE;
  }

  // Do not consider modules that don't return a name.
  $name = module_invoke($type, 'search', 'name');
  if (empty($name)) {
    return FALSE;
  }

  // Check if this search type is enabled.
  $enabled = variable_get('opensearch_enabled_types', NULL);
  $bool = (
    empty($enabled) ||
    (isset($enabled) && in_array($type, array_filter($enabled)))
  );
  if ($bool) {
    $info = new stdClass();
    $info->type = $type;
    $info->settings = opensearch_load_settings($type);

    $feeds = variable_get('opensearch_enabled_feeds', NULL);

    $info->feed = (
      isset($feeds) ||
      (isset($feeds) && in_array($type, array_filter($feeds)))
    );

    return $info;
  }

  return FALSE;
}

/**
 * Processes variables for opensearch-description.tpl.php.
 */
function template_preprocess_opensearch_description(&$variables) {
  global $base_path;

  $info = $variables['info'];

  $variables['adult_content'] = $info->settings['adult_content'];
  $variables['attribution'] = _opensearch_check_plain($info->settings['attribution'], $info->type, 256);
  $variables['contact'] = _opensearch_check_plain($info->settings['contact'], $info->type);
  $variables['description'] = _opensearch_check_plain($info->settings['description'], $info->type, 1024);
  $variables['longname'] = _opensearch_check_plain($info->settings['longname'], $info->type, 48);
  $variables['shortname'] = _opensearch_check_plain($info->settings['shortname'], $info->type, 16);
  $variables['syndication_right'] = $info->settings['syndication_right'];
  $variables['tags'] = _opensearch_unique_values(
    _opensearch_check_plain($info->settings['tags'], $info->type, 256)
  );
  $variables['url_opensearch'] = str_replace(
    array('%7B', '%7D', '&'),
    array('{', '}', '&amp;'),
    url('opensearch/' . $info->type . '/{searchTerms}', array('absolute' => TRUE))
  );
  $variables['url_search'] = str_replace(
    array('%7B', '%7D', '&'),
    array('{', '}', '&amp;'),
    url('search/' . $info->type . '/{searchTerms}', array('absolute' => TRUE))
  );
  $variables['url_self'] = url('opensearch/' . $info->type, array('absolute' => TRUE));

  $languages = language_list('enabled');
  $variables['languages'] = $languages[1];

  $bool = (
    $info->settings['image_type'] == 'theme' ||
    (
      $info->settings['image_type'] == 'theme' &&
      empty($info->settings['image_custom'])
    )
  );

  if ($bool) {
    init_theme();
    $image_path = theme_get_setting('favicon');
  }
  else {
    $image_path = $info->settings['image_custom'];
  }

  if (isset($image_path)) {
    if (strpos($image_path, $base_path) === 0) {
      $image_path = drupal_substr($image_path, drupal_strlen($base_path));
    }

    if (!empty($image_path)) {
      $attrs = array();
      $image_attributes = @getimagesize($image_path);
      $url_options = array('absolute' => TRUE);

      if (!empty($image_attributes[0])) {
        $attrs['width'] = $image_attributes[0];
      }
      if (!empty($image_attributes[1])) {
        $attrs['height'] = $image_attributes[1];
      }
      if (!empty($image_attributes['mime'])) {
        $attrs['type'] = $image_attributes['mime'];
      }

      $variables['image_attributes'] = drupal_attributes($attrs);
      $variables['image_url'] = url($image_path, array('absolute' => TRUE));
    }
  }
}

/**
 * Adds a OpenSearch <link> tag in the current page's <head>.
 *
 * @param $info
 *   A search info object from opensearch_type_load().
 */
function opensearch_add_opensearch_link($info) {
  $link = array(
    'href' => url('opensearch/'. $info->type, array('absolute' => TRUE)),
    'title' => _opensearch_check_plain($info->settings['longname'], $info->type),
    'rel' => 'search',
    'type' => 'application/opensearchdescription+xml',
  );
  drupal_add_link($link);
}

/**
 * Filters the content of a string used in the OpenSearch descriptor.
 *
 * @param $string
 *   The string to be filtered.
 * @param $type
 *   The module implementing the search hook.
 * @param $length
 *   The length of the returned string; if the parameter is not used,
 *   or it is equal to 0, then the string will not be truncated.
 *
 * @return
 *  The filtered string.
 */
function opensearch_check_plain($string, $type, $length = 0) {
  if (module_exists('token')) {
    $token_objects = array('global' => NULL);

    if (module_exists('opensearch_token')) {
      $token_objects['search'] = $type;
    }

    $string = token_replace_multiple($string, $token_objects);
  }

  $result = check_plain(
    strip_tags(
      decode_entities(
        preg_replace('/(\r\n?|\n)/', '', $string)
      )
    )
  );

  if ($length) {
    $result = truncate_utf8($result, $length);
  }

  return $result;
}

/**
 * Loads the default settings values.
 *
 * @return
 *   An array of default values.
 *
 * @see opensearch_load_settings()
 * @see opensearch_save_settings()
 */
function opensearch_default_settings() {
  $defaults = array(
    'adult_content' => 0,
    'attribution' => '',
    'contact' => '[site-mail]',
    'description' => '[search-name] search for [site-name].',
    'image_type' => 'theme',
    'image_custom' => '',
    'longname' => '[search-name] search for [site-name]',
    'rss_description' => '[search-name] search results for "[search-keywords]" at [site-name]',
    'rss_title' => '[site-name] [search-name] search: [search-keywords]',
    'shortname' => '[search-name] search',
    'syndication_right' => 'open',
    'tags' => '',
  );

  drupal_alter('opensearch_default_settings', $defaults);

  return $defaults;
}

/**
 * Checks if the current page is a front-end search page.
 *
 * This should also match any search results pages as well.
 *
 * @return
 *   The module responsible for the current search routine, or NULL if the
 *   current page is not a search page.
 */
function opensearch_is_search_page() {
  $bool = (
    (arg(0) == 'search' || arg(0) == 'opensearch') &&
    ($module = arg(1)) &&
    module_invoke($module, 'search', 'name')
  );

  return $bool ? $module : '';
}

/**
 * Loads the module settings.
 *
 * @param $type
 *   The module implementing the search hook to which the options refer to, or
 *   '-default-.
 *
 * @return
 *   An array containing the module settings.
 */
function opensearch_load_settings($type = '-default-') {
  $row = db_fetch_object(
    db_query_range(
      "SELECT settings FROM {opensearch} WHERE type = '%s'", $type, 0, 1
    )
  );
  $settings = array();

  if ($row) {
    $settings = empty($row->settings) ? array() : unserialize($row->settings);

  }

  $settings += opensearch_default_settings();

  return $settings;
}

/**
 * Saves the module settings.
 *
 * @param $settings
 *   The settings array.
 * @param $type
 *   The module implementing the search hook to which the options refer to, or
 *   '-default-.
 *
 * @return
 *   An array containing the module settings.
 */
function opensearch_save_settings($settings = array(), $type = '-default-') {
  $result = db_fetch_object(
    db_query(
      "SELECT id, type, settings FROM {opensearch} WHERE type = '%s'",
      $type
    )
  );

  if ($result === FALSE) {
    $row = new stdClass();
    $row->type = $type;
  }
  else {
    $row = $result;
  }

  $row->settings = $settings;

  drupal_write_record('opensearch', $row, $result === FALSE ? array() : 'id');
}

/**
 * Removes the duplicates from a list of items separated from the separator,
 * preserving the order in which they appear.
 *
 * @param $text
 *   The string containing the list of items concatenated using $separator.
 * @param $separator
 *   The string used to split the string into an array. A space will be appended
 *   to the string before it is used to create the string from the array of
 *   unique items found in the string passed as argument.
 * @param $max_items
 *   The maximum number of items accepted in the returned array; the default
 *   value is -1, which means no limit.
 *
 * @return
 *   A string containing only unique items present in the string of concatenated
 *   items.
 */
function opensearch_unique_values($text, $separator = ' ', $max_items = -1) {
  $lc_values = array();
  $unique_values = array();

  if (empty($text)) {
    return '';
  }

  foreach (array_filter(array_map('trim', explode($separator, $text))) as $item) {
    $lowercase = drupal_strtolower($item);

    if (!in_array($lowercase, $lc_values)) {
      $lc_values[] = $lowercase;
      $unique_values[] = $item;
    }
  }

  if ($max_items > 0) {
    $unique_values = array_slice($unique_values, 0, $max_items);
  }

  return implode("$separator", $unique_values);
}
//intelsat-2014
function _opensearch_check_plain($string, $type, $length = 0) {
  if (module_exists('token')) {
    $token_objects = array('global' => NULL);

    if (module_exists('opensearch_token')) {
      $token_objects['search'] = $type;
    }

    $string = token_replace_multiple($string, $token_objects);
  }

  $result = check_plain(
    strip_tags(
      decode_entities(
        preg_replace('/(\r\n?|\n)/', '', $string)
      )
    )
  );

  if ($length) {
    $result = truncate_utf8($result, $length);
  }

  return $result;
}