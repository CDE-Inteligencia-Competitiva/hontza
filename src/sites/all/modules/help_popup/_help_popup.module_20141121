<?php
/**
 * This module will print a link
 * that will work on both Javascript and non-javascript browsers.
 * Relies on the Javascript function openpopup in help_popup.js
 *
 */
help_popup_load_js();
/**
 * Implementation of hook_form_alter()
 */ 
function help_popup_form_alter(&$form, $form_state, $form_id) {
  $formhelp = help_popup_ui_formhelp_by_form_name($form_id);
  global $user;
  if (!empty($formhelp)) {
    foreach ($form as $key => $field) {
	  if (is_array($form[$key])) {
	    if (isset($form[$key]['#title'])) {
	      $fieldhelp = help_popup_ui_formhelp_by_both_names($form_id, $key);
		  //drupal_set_message('field '.print_r($fieldhelp,1));
	      if (!empty($fieldhelp)) {
            $form[$key]['#prefix'] = help_popup_window($fieldhelp['nid'], $fieldhelp['template']);
            //drupal_set_message(help_popup_window(variable_get('help_popup_field_nid_'.$i, ''), variable_get('help_popup_field_tpl_'.$i, '')),1);
          }
        }
	    else {
	      foreach ($form[$key] as $subkey => $field) {
	        $fieldhelp = help_popup_ui_formhelp_by_both_names($form_id, $subkey);
	        if (!empty($fieldhelp)) {
              $form[$key]['#prefix'] = help_popup_window($fieldhelp['nid'], $fieldhelp['template']);
            //drupal_set_message(help_popup_window(variable_get('help_popup_field_nid_'.$i, ''), variable_get('help_popup_field_tpl_'.$i, '')),1);
			}
          }
		}
	  }
	}
  }
}

/**
 * Implementation of hook_perm().
 */
function help_popup_perm() {
  return array('administer help popup');
}

/**
 * Implementation of hook_theme().
 */
function help_popup_theme($existing, $type, $theme, $path) {
  return array(
    'help_popup' => array(
      'arguments' => array('styles' => NULL, 'node' => NULL),
      'template' => 'help-popup'
    ),
    'help_popup_js' => array(
      'arguments' => array('node' => NULL),
      'template' => 'help-popup-js'
    ),
  );
}
/**
 * Implementation of hook_filter().
 */
function help_popup_filter($op, $delta = 0, $format = -1, $text = '') {
  if ($op == 'list') {
    return array(
      0 => t('Render popup help links'), 
    );
  }

  switch ($delta) {
    case 0:
      switch ($op) {
        // This description is shown in the administrative interface, unlike the
        // filter tips which are shown in the content editing interface.
        case 'description':
          return t('Substitutes link objects for help popup tags.');
          // We don't need the "prepare" operation for this filter, but it's required
          // to at least return the input text as-is.
        case 'prepare':
          return $text;

        case 'process':
          $matches = help_popup_get_tags($text);
     
          foreach ($matches[0] as $match) {
            $parts = explode("-", $match);
            $nid = str_replace("]", '', $parts[1]);
            $text = str_replace($match, help_popup_window($nid, 'help'), $text);
          }
          return $text;
      }
  }
}
/**
 * Implementation of hook_filter_tips().
 */
function help_popup_filter_tips($delta, $format, $long = FALSE) {
  switch ($delta) {
    case 0:
      if ($long) {
        return t('Help popup tags are replaced with their respective link objects');
      }
      break;
  }
}
/**
 *   The key function that produces the popup
 */

//gemini
//function help_popup_window($nid, $template="help", $linkobject=null, $width=0, $height=0) {
//function help_popup_window($nid, $template="help", $linkobject=null, $width=0, $height=0,$is_block=0,$my_is_mouse_over=0) {
function help_popup_window($nid_in, $template="help", $linkobject=null, $width=0, $height=0,$is_block=0,$my_is_mouse_over=0) {
  global $base_url;
  //gemini
  global $user;
  if(!(isset($user->uid) && !empty($user->uid))){
        return '';
  }  
  $nid=$nid_in;
  $nid=get_help_popup_nid_by_lang($nid);
  //
  $template = help_popup_ui_template_by_name($template);
  
  if (empty($template)) $template = help_popup_get_default_template();
  if ($width == 0) $width = $template['width'];
  if ($height == 0) $height = $template['height'];
  //  Users can supply custom linkobject so we only supply a default if none is passed.
  // Templates describe the html of the link object, the $options for display of the window
  // Now select our link object template
  if (!$linkobject) $linkobject = $template['template'];
  $template['options'] = implode(",", $template['options']);
  //watchdog('help_popup', print_r($template,1));
  if ($template['xmargin'] > 0) $options .=',left='.$template['xmargin'];
  if ($template['ymargin'] > 0) $options .= ',top='.$template['ymargin']; 
    
  $url = 'help_popup.php?nid='.$nid;
  if ($width) {
    $options .= ',width='. $width;
    $url .= '&w='.$width;
  }
  if ($height) {
    $options .= ',height='. $height;
    $url .= '&h='.$height;
  }
  if ($id) {
    $id = ' id="'.$id.'" ';
  }
  
  $class = ' class="'.$template['name'].'-popup" ';
  

  // get some default string, using the localized version of legacy defaults
  if (!$name) {
    $name = $template['name'];
  }
  if (!$title) {
    $title = 'popup window';
  }

  $fullscreen = 0; // must be passed to openpopup
  $url = base_path() . $url;
  if (variable_get('help_popup_popup_type', 'js') == "standard") {
      // some log url entries contain _SERVER[HTTP_REFERRER] in which case wwwroot is already there.
      $url .= '&type=standard';
      $element = '<a title="'. strip_tags($title) .'" href="'. $url .'" '. $id . $class .
                   "onclick=\"this.target='$name'; return openpopup('$url', ',',',',','$name', ',',',',','$options', $fullscreen);\">$linkobject</a>";
  }
  else {
    
	//gemini
	$grupo=og_get_group_context()->purl;
	$url.='&'.my_drupal_get_destination($grupo); 
    //
	
    // We do not use drupal_add_js here because menu and form items can get cached and we need to retain this js call when that happens
    $element = "		
	  <script type=\"text/javascript\">
	  //gemini
	  var is_block_".$nid."=".$is_block.";
	  var my_is_mouse_over_".$nid."=".$my_is_mouse_over.";
	  //
	  $().ready(function() {
        //gemini
		//OHARRA::::modal:true gehitu da 
		$('#ex".$nid."').jqm({ajax: '".$url."', trigger: 'a.jqm-trigger-".$nid."',modal:true, toTop: true, overlay: ". $template['overlay'] ."});
      	//gemini
		//if(is_block_".$nid."==0 || my_is_mouse_over_".$nid."==1){			
		//	$('.jqm-trigger-".$nid."').mouseover(function() {
		//		$('#ex".$nid."').jqmShow();
		//	});
		//}
		//	
	  });
       </script>";
	$url .= '&type=js';
    //gemini
	//$element .= '<a href="#" class="jqm-trigger-'.$nid.'">'.$linkobject.'</a><div class="jqmWindow" id="ex'.$nid.'"></div>';  
	
	//gemini
	$my_style='float:left;';
	
	if($is_block==1 || $is_block==3){
		$my_style='float:right;background:none;padding-left:0px;';
	}else if($is_block==2){
		$my_style='background:none;padding-left:0px;';
	}
	
	$element .= '<a href="#" style="'.$my_style.'" class="jqm-trigger-'.$nid.'">'.$linkobject.'</a><div class="jqmWindow" id="ex'.$nid.'"></div>';
  	//
  }
  return $element;
}
/**
 * Get an array of all templates and their settings.
 *
 * @param reset
 *   if set to true it will clear the template cache
 *
 * @return
 *   array of templates array( $template_id => array('template_id' => integer, 'name' => string))
 */
function help_popup_templates($reset = false) {
  static $templates = array();

  // Clear  caches if $reset is true;
  if ($reset) {
    $templates = array();
    cache_clear_all('help_popup_ui:templates', 'cache');

  }
  // Return templates if the array is populated.
  if (!empty($templates)) {
    return $templates;
  }

  // Grab from cache or build the array. To ensure that the Drupal 5 upgrade
  // path works, we also check whether the templates list is an array.
  if (($cache = cache_get('help_popup_ui:templates', 'cache')) && is_array($cache->data)) {
    $templates = $cache->data;
  }
  else {
    $result = db_query('SELECT * FROM {help_popup_templates} ORDER BY name');
    while ($template = db_fetch_array($result)) {
	  $template['options'] = unserialize($template['options']);
      $templates[$template['template_id']] = $template;
    }

    cache_set('help_popup_ui:templates', $templates);
  }
  return $templates;
}

/**
 * Load a template by template_id.
 *
 * @param template_id
 *   The numeric id of a template.
 *
 * @return
 *   template array( )
 *   empty array if template_id is an invalid template
 */
function help_popup_template($template_id, $reset = false) {
  $templates = help_popup_templates($reset);
  return (isset($templates[$template_id])) ? $templates[$template_id] : array();
}

/**
 * Load a template by name.
 *
 * @param name
 *   The name of a template.
 *
 * @return
 *   template array()
 *   
 */
function help_popup_ui_template_by_name($template_name) {
  static $templates_by_name = array();
  if (!$templates_by_name &&  $templates = help_popup_templates()) {
    foreach ($templates as $template) {
      $templates_by_name[$template['name']] = $template;
    }
  }
  return (isset($templates_by_name[$template_name])) ? $templates_by_name[$template_name] : array();
}
function help_popup_get_default_template() {
    $template = array(
      'name' => 'help',
	  'template' => '<img class="iconhelp" alt="help" src="'.base_path().drupal_get_path('module', 'help_popup') .'/help.gif" />',
	  'height' => 400,
	  'width' => 500,
	  'xmargin' => 200,
	  'ymargin' => 100,
	  'options' => array('scrollbars', 'resizeable')
	);
	return $template;
}
/**
 * Get an array of all templates and their settings.
 *
 * @param reset
 *   if set to true it will clear the template cache
 *
 * @return
 *   array of templates array( $template_id => array('template_id' => integer, 'name' => string))
 */
function help_popup_formhelps($reset = false) {
  static $formhelps = array();

  // Clear  caches if $reset is true;
  if ($reset) {
    $formhelps = array();
    cache_clear_all('help_popup_ui:formhelps', 'cache');

  }
  // Return formhelps if the array is populated.
  if (!empty($formhelps)) {
    return $formhelps;
  }

  // Grab from cache or build the array. To ensure that the Drupal 5 upgrade
  // path works, we also check whether the formhelps list is an array.
  if (($cache = cache_get('help_popup_ui:formhelps', 'cache')) && is_array($cache->data)) {
    $formhelps = $cache->data;
  }
  else {
    $result = db_query('SELECT * FROM {help_popup_formhelp} ORDER BY name');
    while ($formhelp = db_fetch_array($result)) {
	  $formhelp['options'] = unserialize($formhelp['options']);
      $formhelps[$formhelp['formhelp_id']] = $formhelp;
    }

    cache_set('help_popup_ui:formhelps', $formhelps);
  }
  return $formhelps;
}

/**
 * Load a formhelp by formhelp_id.
 *
 * @param formhelp_id
 *   The numeric id of a formhelp.
 *
 * @return
 *   formhelp array( )
 *   empty array if formhelp_id is an invalid formhelp
 */
function help_popup_formhelp($formhelp_id, $reset = false) {
  $formhelps = help_popup_formhelps($reset);
  return (isset($formhelps[$formhelp_id])) ? $formhelps[$formhelp_id] : array();
}

/**
 * Load a formhelp by name.
 *
 * @param name
 *   The name of a formhelp.
 *
 * @return
 *   formhelp array()
 *   
 */
function help_popup_ui_formhelp_by_form_name($formhelp_name) {
  static $formhelps_by_form_name = array();
  if (!$formhelps_by_form_name && $formhelps = help_popup_formhelps()) {
    foreach ($formhelps as $formhelp) {
      $formhelps_by_form_name[$formhelp['name']] = $formhelp;
    }
  }
  return (isset($formhelps_by_form_name[$formhelp_name])) ? $formhelps_by_form_name[$formhelp_name] : array();
}

function help_popup_ui_formhelp_by_both_names($formhelp_name, $formhelp_field) {
  static $formhelps_by_both_names = array();
  if (!$formhelps_by_both_names && $formhelps = help_popup_formhelps()) {
    foreach ($formhelps as $formhelp) {
      $formhelps_by_both_names[$formhelp['name'].'-'.$formhelp['field']] = $formhelp;
    }
  }
  return (isset($formhelps_by_both_names[$formhelp_name.'-'.$formhelp_field])) ? $formhelps_by_both_names[$formhelp_name.'-'.$formhelp_field] : array();
}

function help_popup_get_default_formhelp() {
    $formhelp = array(
      'name' => 'help',
	  'formhelp' => '<img class="iconhelp" alt="help" src="'.base_path().drupal_get_path('module', 'popup') .'/help.gif" />',
	  'height' => 400,
	  'width' => 500,
	  'xmargin' => 200,
	  'ymargin' => 100,
	  'options' => array('scrollbars', 'resizeable')
	);
	return $formhelp;
}
function help_popup_get_replacements($link) {
  $match = help_popup_get_tags($link);
  $parts = explode("-", $match[0][0]);
  $nid = str_replace("]", '', $parts[1]);
  return array(
    'tag'   => $match[0][0],
    'nid'  => $nid
   );
}
/*
 *  Hook filter callback
 */
function help_popup_get_tags($html) {
  $tag_regex = "|\[popup-(.*)[^>]+\]|U";
  preg_match_all($tag_regex,
                 $html,
                 $matches,
                 PREG_PATTERN_ORDER);
  return $matches;
}

function help_popup_load_js() {
  static $jsloaded;
  if (!$jsloaded) {
    drupal_add_js(drupal_get_path('module','help_popup').'/help_popup.js');
    drupal_add_css(drupal_get_path('module','help_popup').'/jq_modal.css');
    $jsloaded = TRUE;
  }
  return;
}
//gemini
function get_help_popup_nid_by_lang($nid_orig){
    /*global $language;
    //
    if(!empty($nid_orig)){
        $node_orig=node_load($nid_orig);
        if(isset($node_orig->nid) && !empty($node_orig->nid)){
            if(strcmp($node_orig->language,$language->language)==0){
                return $nid_orig;
            }else{
                 $param=array('tnid'=>$nid_orig,'language'=>$language->language);
                 $node=node_load($param);
                 if(isset($node->nid) && !empty($node->nid)){
                    return $node->nid;
                 }
            }
        }
    }*/
    $node=hontza_node_load_by_lang($nid_orig);
    if(isset($node->nid) && !empty($node->nid)){
        return $node->nid;
    }
    //
    return $nid_orig;
}