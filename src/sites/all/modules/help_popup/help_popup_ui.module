<?php
// $Id: help_popup_ui.module,v 1.28 2009/02/17 21:57:31 drewish Exp $

/**
 * Administrative interface to help_popup.
 *
 */
//include('help_popup.install');
//help_popup_uninstall();
//help_popup_install();
/**
 * Implementation of hook_menu().
 */
function help_popup_ui_menu() {
  $items = array();
  $items['admin/settings/help_popup'] = array(
    'title' => 'Help Popup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_admin_settings'),
    'access arguments' => array('administer help popup'),
    'type' => MENU_NORMAL_ITEM
  );   
  $items['admin/settings/help_popup/templates'] = array(
    'title' => 'Templates',
    'page callback' => 'help_popup_ui_templates',
	'access arguments' => array('administer help popup'),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
  );   
  $items['admin/settings/help_popup/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer help popup'),
    'weight' => -11,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );   

  $items['admin/settings/help_popup/add-template'] = array(
    'title' => 'Add new template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_template_form', 'add'),
    'access arguments' => array('administer help popup'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  $items['admin/settings/help_popup/formhelps'] = array(
    'title' => 'Form Help',
    'page callback' => 'help_popup_ui_formhelps',
    'access arguments' => array('administer help popup'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );   

  $items['admin/settings/help_popup/add-formhelp'] = array(
    'title' => 'Add new form help',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_formhelp_form', 'add'),
    'access arguments' => array('administer help popup'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );

  $items['admin/settings/help_popup/template/%help_popup_ui_template'] = array(
    'title callback' => 'help_popup_template_title_callback',
    'title arguments' => array('Edit template: !name', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_template_form', 4),
    'access arguments' => array('administer help popup'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/help_popup/template/%help_popup_ui_template/delete'] = array(
    'title callback' => 'help_popup_template_title_callback',
    'title arguments' => array('Delete template: !name', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_template_delete_form', 4),
    'access arguments' => array('administer help popup'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/help_popup/formhelp/%help_popup_ui_formhelp'] = array(
    'title callback' => 'help_popup_template_title_callback',
    'title arguments' => array('Edit form Help: !name', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_formhelp_form', 4),
    'access arguments' => array('administer help popup'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/help_popup/formhelp/%help_popup_ui_formhelp/delete'] = array(
    'title callback' => 'help_popup_template_title_callback',
    'title arguments' => array('Delete Form Help: !name', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('help_popup_ui_formhelp_delete_form', 4),
    'access arguments' => array('administer help popup'),
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function help_popup_template_title_callback($title, $template = array(), $action = array()) {
  $replacements = array();
  if (!empty($template)) {
    $replacements['!name'] = $template['name'];
    $replacements['!template_id'] = $template['template_id'];
  }
  return t($title, $replacements);
}

/**
 * Menu wildcard loader.
 */
function help_popup_ui_template_load($template_id) {
  return help_popup_template($template_id, TRUE);
}
function help_popup_ui_formhelp_load($formhelp_id) {
  return help_popup_formhelp($formhelp_id, TRUE);
}

/**
 * template Admin callbacks and required functions.
 */
function help_popup_ui_templates() {
  $header = array(t('template Name'), t('Actions'));
  $rows = array();
  // Always clear the template cache on this display.
  foreach (help_popup_templates(TRUE) as $template) {
    $row = array();
    $row[] = l($template['name'], 'admin/settings/help_popup/template/'. $template['template_id']);
    $links = array();
        $links[] = l(t('Edit'), 'admin/settings/help_popup/template/'. $template['template_id']);
        $links[] = l(t('Delete'), 'admin/settings/help_popup/template/'. $template['template_id'] .'/delete');
    
    $row[] = implode('&nbsp;&nbsp;&nbsp;&nbsp;', $links);
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows);
  return $output;
}

function help_popup_ui_formhelps() {
  $header = array(t('Form Name'), t('Field Name'), t('Actions'));
  $rows = array();
  // Always clear the template cache on this display.
  foreach (help_popup_formhelps(TRUE) as $formhelp) {
    $row = array();
    $row[] = l($formhelp['name'], 'admin/settings/help_popup/formhelp/'. $formhelp['formhelp_id']);
    $row[] = $formhelp['field'];
    $links = array();
    $links[] = l(t('Edit'), 'admin/settings/help_popup/formhelp/'. $formhelp['formhelp_id']);
    $links[] = l(t('Delete'), 'admin/settings/help_popup/formhelp/'. $formhelp['formhelp_id'] .'/delete');
    
    $row[] = implode('&nbsp;&nbsp;&nbsp;&nbsp;', $links);
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows);
  return $output;
}

function help_popup_ui_template_form($form_state, $arg) {
  $form = array();
  if (is_array($arg)) {
    $template = $arg;
	//drupal_set_message(print_r($template,1));
    if (empty($template)) {
      drupal_set_message(t('The specified template was not found.'), 'error');
      drupal_goto('admin/settings/help_popup/template');
    }

    $form['template_id'] = array(
      '#type' => 'value',
      '#value' => $template['template_id'],
    );
    $form['operation'] = array(
      '#type' => 'value',
      '#value' => 'edited',
    );
    $value = t('Save');
  }
  else {
    $template = help_popup_get_default_template();
	$value = t('Create New template');
    $form['operation'] = array(
      '#type' => 'value',
      '#value' => 'added',
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#title' => t('Template Name'),
    '#default_value' => $template['name'],
    '#description' => t('The namespace is used in URLs for images to tell help popup how to process a template. Please only use alphanumeric characters, underscores (_), and hyphens (-) for template names.'),
    '#required' => TRUE,
  );
    $form['template'] = array(
      '#type'        => 'textarea',
      '#title'      => t('Link object template'),
      '#description'     => t('This is the html of the template that you wish to use for these popup links.  When you call this template, this is the html which is rendered.'),
      '#default_value'   => $template['template'],
    );
    $form['height'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Popup height'),
      '#description'     => t('The height of the popup.'),
      '#default_value'   => $template['height'],
    );
    $form['width'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Popup width'),
      '#description'    => t('The width of the popup.'),
      '#default_value'  => $template['width'],
    );
    $form['xmargin'] = array(
      '#type'        => 'textfield',
      '#title'      => t('X Distance'),
      '#description'     => t('The distance of the popup in pixels from the left of screen.'),
      '#default_value'   => $template['xmargin'],
    );
    $form['ymargin'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Y Distance'),
      '#description'    => t('The distance of the popup in pixels from the top of screen.'),
      '#default_value'  => $template['ymargin'],
    );
    $form['overlay'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Overlay'),
      '#description'    => t('A value between 0 and 100. 0 means overlay is transparent, 100 means it is opaque.'),
      '#default_value'  => $template['overlay'],
    );
    $options = array('scrollbars' => 'scrollbars', 'resizeable' => 'resizable', 'location' => 'location', 'menubar' => 'menubar', 'status' => 'status', 'toolbar' => 'toolbar', 'titlebar' => 'titlebar');
    $form['options'] = array(
      '#type'        => 'select',
      '#title'      => t('Popup options'),
      '#options'      => $options,
      '#multiple'      => TRUE,
      '#description'    => t('The options for the popup.  Select as many as you want.'),
      '#default_value'  => $template['options'],
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $value,
  );
  return $form;
}

function help_popup_ui_template_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Check for duplicates
  // drupal_set_message(print_r($values,1));
  if (!isset($values['template_id'])) {
  foreach (help_popup_templates() as $template) {
    if ($values['name'] == $template['name']) {
      form_set_error('name', t('The template you have chosen is already in use.'));
      break;
    }
  }
  }

  // Check for illegal characters in template names
  if (preg_match('/[^0-9a-zA-Z_\-]/', $values['name'])) {
    form_set_error('name', t('Please only use alphanumeric characters, underscores (_), and hyphens (-) for template names.'));
  }
  if ($values['overlay'] > 100 || $values['overlay'] < 0 || !is_numeric($values['overlay'] )) form_set_error('overlay', t('The overlay values must be a number between 0 and 100'));
}

function help_popup_ui_template_form_submit($form, &$form_state) {
  $template = array('name' => $form_state['values']['name']);
  $form_state['values']['options'] = serialize($form_state['values']['options']);
  $template = help_popup_template_save($form_state['values']);
  drupal_set_message(t('template %name (ID: @id) was !operation.', array('%name' => $template['name'], '@id' => $template['template_id'], '!operation' => $form_state['values']['operation'])));
  $form_state['redirect'] = 'admin/settings/help_popup/template/'. $template['template_id'];
}


function help_popup_ui_template_delete_form($form_state, $template = array()) {
  if (empty($template)) {
    drupal_set_message(t('The specified template was not found'), 'error');
    drupal_goto('admin/settings/help_popup/template');
  }

  $form = array();
  $form['template_id'] = array('#type' => 'value', '#value' => $template['template_id']);
  return confirm_form(
    $form,
    t('Are you sure you want to delete the template %template?',
      array('%template' => $template['name'])
    ),
    'admin/settings/help_popup/template',
    t('This action cannot be undone.'),
    t('Delete'),  t('Cancel')
  );
}

function help_popup_ui_template_delete_form_submit($form, &$form_state) {
  $template = help_popup_template($form_state['values']['template_id']);
  help_popup_template_delete($template);
  drupal_set_message(t('template %name (ID: @id) was deleted.', array('%name' => $template['name'], '@id' => $template['template_id'])));
  $form_state['redirect'] = 'admin/settings/help_popup/template';
}


function help_popup_ui_formhelp_form($form_state, $arg) {
  $form = array();
  if (is_array($arg)) {
    $formhelp = $arg;
	//drupal_set_message(print_r($formhelp,1));
    if (empty($formhelp)) {
      drupal_set_message(t('The specified formhelp was not found.'), 'error');
      drupal_goto('admin/settings/help_popup/formhelp');
    }

    $form['formhelp_id'] = array(
      '#type' => 'value',
      '#value' => $formhelp['formhelp_id'],
    );
    $form['operation'] = array(
      '#type' => 'value',
      '#value' => 'edited',
    );
    $value = t('Save');
  }
  else {
    //$formhelp = help_popup_get_default_formhelp();
	$value = t('Create New formhelp');
    $form['operation'] = array(
      '#type' => 'value',
      '#value' => 'added',
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#title' => t('Form Name'),
    '#default_value' => $formhelp['name'],
    '#description' => t('The form name or ID.'),
    '#required' => TRUE,
  );
    $form['field'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Field Name'),
      '#description'     => t('This is the html of the formhelp that you wish to use for these popup links.  When you call this formhelp, this is the html which is rendered.'),
      '#default_value'   => $formhelp['field'],
    );
    $form['nid'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Node Nid'),
      '#description'     => t('The height of the popup.'),
      '#default_value'   => $formhelp['nid'],
    );
    $form['template'] = array(
      '#type'        => 'textfield',
      '#title'      => t('Template Name'),
      '#description'    => t('The width of the popup.'),
      '#default_value'  => $formhelp['template'],
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $value,
  );
  return $form;
}

function help_popup_ui_formhelp_form_submit($form, &$form_state) {
  $formhelp = array('name' => $form_state['values']['name']);
  $formhelp = help_popup_formhelp_save($form_state['values']);
  drupal_set_message(t('formhelp %name (ID: @id) was !operation.', array('%name' => $formhelp['name'], '@id' => $formhelp['formhelp_id'], '!operation' => $form_state['values']['operation'])));
  $form_state['redirect'] = 'admin/settings/help_popup/formhelp/'. $formhelp['formhelp_id'];
}

function help_popup_ui_formhelp_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Check for duplicates
  // drupal_set_message(print_r($values,1));
  if (!isset($values['formhelp_id'])) {
  foreach (help_popup_formhelps() as $formhelp) {
    if ($values['name'] == $formhelp['name']) {
      form_set_error('name', t('The formhelp you have chosen is already in use.'));
      break;
    }
  }
  }

  // Check for illegal characters in formhelp names
  if (preg_match('/[^0-9a-zA-Z_\-]/', $values['name'])) {
    form_set_error('name', t('Please only use alphanumeric characters, underscores (_), and hyphens (-) for formhelp names.'));
  }
}

function help_popup_ui_formhelp_delete_form($form_state, $formhelp = array()) {
  if (empty($formhelp)) {
    drupal_set_message(t('The specified formhelp was not found'), 'error');
    drupal_goto('admin/settings/help_popup/formhelp');
  }

  $form = array();
  $form['formhelp_id'] = array('#type' => 'value', '#value' => $formhelp['formhelp_id']);
  return confirm_form(
    $form,
    t('Are you sure you want to delete the formhelp %formhelp?',
      array('%formhelp' => $formhelp['name'])
    ),
    'admin/settings/help_popup/formhelp',
    t('This action cannot be undone.'),
    t('Delete'),  t('Cancel')
  );
}

function help_popup_ui_formhelp_delete_form_submit($form, &$form_state) {
  $formhelp = help_popup_formhelp($form_state['values']['formhelp_id']);
  help_popup_formhelp_delete($formhelp);
  drupal_set_message(t('form help %name (ID: @id) was deleted.', array('%name' => $formhelp['name'], '@id' => $formhelp['formhelp_id'])));
  $form_state['redirect'] = 'admin/settings/help_popup/formhelp';
}



/**
 * Save an help_popup template.
 *
 * @param template
 *   an help_popup template array.
 * @return
 *   a template array.  In the case of a new template, 'template_id' will be populated.
 */
function help_popup_template_save($template) {
  // @todo: CRUD level validation?
  if (isset($template['template_id']) && is_numeric($template['template_id'])) {
    drupal_write_record('help_popup_templates', $template, 'template_id');
  }
  else {
    drupal_write_record('help_popup_templates', $template);
  }

  return $template;
}

function help_popup_template_delete($template) {
  db_query('DELETE FROM {help_popup_templates} where template_id = %d', $template['template_id']);
  return true;
}

/**
 * Save a help_popup form help.
 *
 * @param formhelp
 *   an help_popup formhelp array.
 * @return
 *   a formhelp array.  In the case of a new formhelp, 'formhelp_id' will be populated.
 */
function help_popup_formhelp_save($formhelp) {
  // @todo: CRUD level validation?
  if (isset($formhelp['formhelp_id']) && is_numeric($formhelp['formhelp_id'])) {
    drupal_write_record('help_popup_formhelp', $formhelp, 'formhelp_id');
  }
  else {
    drupal_write_record('help_popup_formhelp', $formhelp);
  }

  return $formhelp;
}

function help_popup_formhelp_delete($formhelp) {
  db_query('DELETE FROM {help_popup_formhelps} where formhelp_id = %d', $formhelp['formhelp_id']);
  return true;
}

/**
 *  Menu callback
 **/
function help_popup_admin_settings() {
  $form['help_popup_popup_type'] = array(
    '#type'        => 'select',
	'#options'	   => array('standard' => t('Standard'), 'js' => t('Javascript')),
    '#title'      => t('Popup Type'),
    '#description'     => t('The type of popup.  Standard creates a new browser window.  Javascript creates a javascript modal.'),
    '#default_value'   => variable_get('help_popup_popup_type', 'js'),
  );
  return system_settings_form($form);

}
