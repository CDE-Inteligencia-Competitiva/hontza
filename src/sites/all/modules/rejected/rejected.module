<?php
require_once('rejected.unread.inc.php');
require_once('rejected.fix.created.inc.php');
function rejected_perm() {
  return array('access rejected');
}
function rejected_menu() {
  $items['rejected/delete_rejected_news'] = array(
    'title' => 'Delete rejected news',
    'page callback' => 'rejected_delete_rejected_news_callback',
    'access arguments' => array('access rejected'),
  );
  $items['rejected/delete_unread_news'] = array(
    'title' => 'Delete unread news',
    'page callback' => 'rejected_unread_delete_unread_news_callback',
    'access arguments' => array('access rejected'),
  );
  $items['rejected/fix_created'] = array(
    'title' => 'Fix Created',
    'page callback' => 'rejected_fix_created_callback',
    'access arguments' => array('access root'),
  );
  return $items;
}
function rejected_delete_rejected_news_callback(){
    return 'Funcion desactivada';
    rejected_delete_rejected_news();
    return date('Y-m-d H:i:s');
}
function rejected_delete_rejected_news(){
    $grupo_array=get_all_nodes(array('grupo'));   
    if(!empty($grupo_array)){
         foreach($grupo_array as $i=>$row){
            $grupo=node_load($row->nid);
            if(isset($grupo->nid) && !empty($grupo->nid)){                
                $meses=rejected_get_delete_rejected_news_time($grupo);
                if($meses>0){                    
                    $news_array=rejected_get_group_news_rejected_array($grupo->nid);
                    if(count($news_array)>0){
                        foreach($news_array as $i=>$news){
                            $created=date('Y-m-d H:i:s',$news->created);
                            $konp_time=strtotime(date('Y-m-d H:i:s',strtotime($created." +".$meses." month" )));
                            $time=time();
                            if($konp_time<$time){
                                //$news_node=node_load($news->nid);
                                //$news_node->uid=0;
                                //node_save($news_node);
                                /*if(hontza_is_sareko_id('ROOT')){
                                    print $news->nid.'<BR>';
                                }*/
                                rejected_node_delete($news->nid);
                            }
                        }    
                    }    
                }
            }
        }
    }
    /*if(hontza_is_sareko_id('ROOT')){
        print date('Y-m-d H:i:s');
        exit();
    }*/
}
function rejected_get_delete_rejected_news_time($grupo){
    if(isset($grupo->field_delete_rejected_news_time) && isset($grupo->field_delete_rejected_news_time[0]) && isset($grupo->field_delete_rejected_news_time[0]['value'])){
        return $grupo->field_delete_rejected_news_time[0]['value'];
    }
    return 0;
}
function rejected_get_group_news_rejected_array($grupo_nid){
    $result=array();
    $where=array();
    $where[]='1';
    $where[]='n.type in ("item", "noticia")';
    $where[]='og_ancestry.group_nid='.$grupo_nid;
    $where[]='flag_content_node.fid = 3';
    //
    $sql='SELECT n.* 
    FROM {node} n 
    LEFT JOIN {og_ancestry} ON n.nid=og_ancestry.nid
    LEFT JOIN {flag_content} flag_content_node ON n.nid = flag_content_node.content_id
    WHERE '.implode(' AND ',$where);
    $res=db_query($sql);
    while($row=db_fetch_object($res)){
        $result[]=$row;
    }
    return $result;
}
function rejected_cron(){
    rejected_delete_rejected_news();
    rejected_unread_delete_unread_news();
}
function rejected_node_delete($nid) {
  //AVISO::::se ha copiatdo de api.drupal.org node_delete para no mirar el permiso desde anonymous  
  // Clear the cache before the load, so if multiple nodes are deleted, the
  // memory will not fill up with nodes (possibly) already removed.
  $node = node_load($nid, NULL, TRUE);

  //if (node_access('delete', $node)) {
    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_access} WHERE nid = %d', $node->nid);

    // Call the node-specific callback (if any):
    node_invoke($node, 'delete');
    node_invoke_nodeapi($node, 'delete');

    // Clear the page and block caches.
    cache_clear_all();

    // Remove this node from the search index if needed.
    if (function_exists('search_wipe')) {
      search_wipe($node->nid, 'node');
    }
    watchdog('content', '@type: deleted %title.', array('@type' => $node->type, '%title' => $node->title));
    drupal_set_message(t('@type %title has been deleted.', array('@type' => node_get_types('name', $node), '%title' => $node->title)));
  //}
}