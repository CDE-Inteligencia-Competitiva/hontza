<?php
// $Id: quant.module,v 1.1.2.1 2010/08/10 23:23:21 mikestefff Exp $

// Date formats
define('QUANT_DATE_DAY_FORMAT', 'M j'); // Month Day (Feb 12)
define('QUANT_DATE_MONTH_FORMAT', 'M y'); // Month Year (Jun 09) 

// Number of allowed colors
define('QUANT_PALETTE_AMOUNT', 25);

// Include contributed quants
require_once('quant.quants.inc');

// Include chart building function
require_once('quant.chart.inc');

// Include forms
require_once('quant.forms.inc');

/**
 * Implementation of hook_perm()
 */
function quant_perm() {
  return array('administer site quant', 'view analytics page'); 
}

/**
 * Implementation of hook_menu()
 */
function quant_menu() {
  $items = array();
 
  // Main analytics page
  $items['analytics'] = array(
    'title' => 'Site analytics',
    'page callback' => 'quant_page',
    //intelsat-2015  
    //'access arguments' => array('view analytics page'),
    'access callback'=>'quant_hontza_analytics_access',  
    'type' => MENU_CALLBACK,
  );
  
  // Settings page
  $items['admin/settings/quant'] = array(
    'title' => 'Quant configuration (analytics)',
    'description' => 'Configure the quantitative analytics page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_admin_settings'),
    'access arguments' => array('administer site quant'),
    'file' => 'quant.forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * The analytics page callback
 */
function quant_page() {
  //gemini-2014
  $my_grupo=og_get_group_context();
  if(isset($my_grupo->nid) && !empty($my_grupo->nid)){
      drupal_set_title(t('Analysis of Group'));
  }  
  // Get time period, if any
  $period = strtotime('-' . str_replace('_', ' ', filter_xss($_GET['period'])));
  if (!is_numeric($period)) {
    $period = strtotime('-1 month'); // Default
  }
  
  // Fetch all available quants
  $quants = quant_get();
  foreach ($quants as $quant) {
    // Check to see if this quant should be shown
    if ($allowed = variable_get('quant_visible', 0)) {      
      //gemini-2014
      if(!quant_my_is_show($quant->id)){
          continue;
      }
      //
      if (!$allowed[$quant->id]) {
        continue;
      }
    }
    // Process the quant
    $charts[] = quant_process($quant, $period);
    
  }

  // Add externals
  drupal_add_css(drupal_get_path('module', 'quant') . '/quant.css');
  
  // Theme and return the page
  return theme('quant_page', drupal_get_form('quant_time_form'), $charts);
}

/**
 * Process quants and convert them to charts with data plotted
 * 
 * @param $quant
 *   A quant object
 * @param $period
 *   A timestamp representing a date in which data should reach back to
 * @return
 *   A complete chart ready for display
 */
//gemini-204
//function quant_process($quant, $period) {
function quant_process($quant_in, $period) {
  $quant=clone $quant_in;  
//    
  $chart = '';
  
  $time=time();
  
  if(is_usuarios_estadisticas(0,'usuarios_acceso')){
      $where_time=quant_get_usuarios_acceso_where_time_array();
      if(!empty($where_time['time_end'])){
          $time=$where_time['time_end'];
      }
  }
       
  // Determine the amount of days in period
  $days = ceil(($time - $period) / 86400);
    
  switch ($quant->dataType) {
    case 'single':
      //gemini-2014
      $quant=quant_my_set_query($quant);
      //
      $items = quant_db_time($quant, $period);
      $items = quant_generate_time($items, $quant->field, $days);
      $chart = quant_init_chart($quant, $items);
      //intelsat-2014
      $quant=quant_my_set_acumulativo($items);
      //
      $chart = quant_chart_time($chart, $quant, $items);
      break;
    case 'multiple':
      //gemini-2014
      $quant=quant_my_set_query($quant);
      // 
      $items = quant_db_time($quant, $period);
      $items = quant_generate_time_multi($items, $quant->field, $quant->group, $days);
      $chart = quant_init_chart($quant, $items);
      //intelsat-2015
      $items=quant_set_item_labels($items,$chart);
      $chart = quant_chart_time_multi($chart, $quant, $items);
      break;
    case 'count':
      $items = quant_db_count($quant, $period);
      $items = quant_generate_count($items, $quant->count);
      $chart = quant_init_chart($quant, $items);
      $chart = quant_chart_count($chart, $quant, $items);
      break;
  } 
  return $chart ? $chart : FALSE;

}

/**
 * Perform a database query based on quant data for calculating
 * time-based trends
 * 
 * @param quant
 *   A quant object
 * @param $period
 *   A timestamp which to return items older than
 * @return
 *   An executed database query
 */
function quant_db_time($quant, $period) {
  // Generate if a query wasn't supplied
  if (!$quant->query) {
    $query = "SELECT $quant->field FROM {{$quant->table}}
      WHERE $quant->field >= %d 
      ORDER BY $quant->field DESC";
  }
  else {
    $query = $quant->query;
  }
  
  return db_query($query, $period);
}

/**
 * Perform a database query based on quant data for calculating
 * counts
 * 
 * @param quant
 *   A quant object
 * @param $period
 *   A timestamp which to return items older than
 * @return
 *   An executed database query
 */
function quant_db_count($quant, $period) {
  // Generate if a query wasn't supplied
  if (!$quant->query) {
    $query = "SELECT COUNT($quant->count), $quant->count 
      FROM {{$quant->table}}
      WHERE $quant->field >= %d 
      GROUP BY $quant->count";
  }
  else {
    $query = $quant->query;
  }
  
  return db_query($query, $period);
}

/**
 * Fetch all available quants
 */
function quant_get() {
  return module_invoke_all('quants');
}

/**
 * Generate chart data for a multiple data point over
 * a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the timestamp
 * @param $group
 *   The database field name to group items on
 * @param $days
 *   How many days back should the data be generated for
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_time_multi($items, $field, $group, $days) {
  $time = time();
  $dates = array();
  $data = array();
  // The date() format to use. We compare by month if there are more than 96 days.
  $format = ($days > 75) ? QUANT_DATE_MONTH_FORMAT : QUANT_DATE_DAY_FORMAT;
  // Whether or not to jump by day or month
  $period = ($days > 75) ? 2629743 : 86400;
  // Possibly convert days to months
  $days = ($days > 75) ? ($days / 30) : $days;
  
  // Place the items into an array for initial grouping by $group
  // For example: $data['page'] = array('May 10', 'May 18');
  while ($item = db_fetch_object($items)) {
    $data[$item->$group][] = date($format, $item->$field);
  }
  
  // Iterate through each group of items and calculate the amount of
  // items for each time period
  foreach ($data as $type => $values) {
    $time = time();
    // Create a new array that's preformatted with a key for
    // every single time period
    for ($i = 0; $i < $days; $i++) {
      $dates[$type][date($format, $time)] = 0;
      $time -= $period; // Backtrack a period
    }

    // Increment for each time period
    foreach ($values as $value) {
      if (isset($dates[$type][$value])) {
        $dates[$type][$value]++;
      }
    }
    
    // Set in ascending order
    $dates[$type] = array_reverse($dates[$type]);
  }
  
  return $dates;
}

/**
 * Generate chart data for a singular data point across
 * a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the timestamp
 * @param $days
 *   How many days back should the data be generated for
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_time($items, $field, $days) {
  $time = time();  
  if(is_usuarios_estadisticas(0,'usuarios_acceso')){
      $where_time=quant_get_usuarios_acceso_where_time_array();
      if(!empty($where_time['time_end'])){
          $time=$where_time['time_end'];
      }
  }
  
  $dates = array();
  
  // The date() format to use. We compare by month if there are more than 183 days.
  $format = ($days > 183) ? QUANT_DATE_MONTH_FORMAT : QUANT_DATE_DAY_FORMAT;
  // Whether or not to jump by day or month
  $period = ($days > 183) ? 2629743 : 86400;
  // Possibly convert days to months
  $days = ($days > 183) ? ($days / 30) : $days;

  // Create a new array that's preformatted with a key for
  // every single time period
  for ($i = 0; $i < $days; $i++) {
    $dates[date($format, $time)] = 0;
    $time -= $period; // Backtrack a period
  }
 
  // Calculate the amount of occurrences per time period
  while ($item = db_fetch_object($items)) {
    if (isset($dates[date($format, $item->$field)])) {
      $dates[date($format, $item->$field)]++;
    }
  }
  // Set in ascending order
  $dates = array_reverse($dates);
  
  return $dates;
}

/**
 * Generate chart data for an aggregate (count) data point 
 * across a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the type to count
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_count($items, $field) {
  $data = array();
  
  while($item = db_fetch_array($items)) {
    $data[$item[$field]] = $item['COUNT(' . $field . ')']; 
  }
  
  return $data;
}

/**
 * Take formatted data for a count chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_count($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  
  foreach ($data as $key => $value) {
    $chart['#data'][] = $value;
    
    // If pie chart, let's add the numeric value to the label
    if ($quant->chartType == 'pie') {
      quant_x_label($chart, $key . ' (' . $value . ')');
    }
    else {
      quant_x_label($chart, $key);
    }
    
    $max = max($max, $value);
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/**
 * Take formatted data for a single-point chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_time($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  $interval = 0; // Counter to help break the x-axis label
  //intelsat-2015
  if(is_usuarios_estadisticas(0,'usuarios_acceso')){
      $period = ceil(count($data) / 4);
  }else{
      $period = ceil(count($data) / 10); // Period when to break x-axis  
  }
  //
  foreach ($data as $date => $value) {
    // Only show the X label every calculated period
    if(!$interval) {
      quant_x_label($chart, $date);
      $interval = $period;
    }
    $chart['#data'][] = $value;
    $max = max($max, $value);
    $interval--;
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/**
 * Take formatted data for a multi-point chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_time_multi($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  $interval = 0; // Counter to help break the x-axis label
  $x = FALSE; // Only register the x-axis labels once
  
  foreach ($data as $type => $values) {
    // Set type as a legend
    $chart['#legends'][] = $type; 
    // Period when to break x-axis
    $period = ceil(count($data[$type]) / 10);
    
    foreach ($values as $date => $value) {
      $chart['#data'][$type][] = $value;
      $max = max($max, $value);
      
      if (!$x) { // Only set x-axis labels once
        if(!$interval) {
          quant_x_label($chart, $date);
          $interval = $period;
        }
        $interval--;
      }
    }
    
    $x = TRUE; // x-axis labels have been set
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/*** THEME ***/

function quant_theme() {
  return array(
    'quant_page' => array(),
  ); 
}

function theme_quant_page($form, $charts) {
  $content = '';
  $content .= $form;
  foreach ($charts as $chart) {
    $content .= '<div class="quant-chart">' . $chart . '</div>'; 
  }
  return $content;
}
//gemini-2014
function quant_my_is_show($quant_id){
    $my_grupo=og_get_group_context();
    if($quant_id=='group_creation1'){
        if(isset($my_grupo->nid) && !empty($my_grupo->nid)){
            return 0;
        }
    }
    return 1;
}
//gemini-2014
function quant_my_set_query($quant_in){
   $quant=clone $quant_in;
   $my_grupo=og_get_group_context();
   $where_grupo='1';
   $where_grupo_og_uid='1';
   if(isset($my_grupo->nid) && !empty($my_grupo->nid)){
    $or=quant_my_get_or_array($my_grupo->nid);       
    $where_grupo="(og_ancestry.group_nid=".$my_grupo->nid." OR ".implode(" OR ",$or).")";
    $where_grupo_og_uid="og_uid.nid=".$my_grupo->nid;
   }else{
    $where_grupo_og_uid=hontza_grupos_mi_grupo_get_quant_where_grupo_all($where_grupo);
   } 
       if($quant->dataType=='multiple' && $quant->id=='node_creation_by_type1'){
           $sql="SELECT type, created 
           FROM {node}
           LEFT JOIN {og_ancestry} ON node.nid=og_ancestry.nid
           LEFT JOIN {estrategia} ON node.vid=estrategia.vid
           LEFT JOIN {despliegue} ON node.vid=despliegue.vid
           LEFT JOIN {decision} ON node.vid=decision.vid
           LEFT JOIN {informacion} ON node.vid=informacion.vid
           LEFT JOIN {idea} ON node.vid=idea.vid
           LEFT JOIN {oportunidad} ON node.vid=oportunidad.vid
           LEFT JOIN {proyecto} ON node.vid=proyecto.vid
           WHERE created >= %d 
           AND type NOT LIKE 'grupo' AND ".$where_grupo." ORDER BY created DESC";
           $quant->query=$sql;
       }else if($quant->id=='content_creation1'){
           $sql="SELECT created 
           FROM {node}
           LEFT JOIN {og_ancestry} ON node.nid=og_ancestry.nid
           LEFT JOIN {estrategia} ON node.vid=estrategia.vid
           LEFT JOIN {despliegue} ON node.vid=despliegue.vid
           LEFT JOIN {decision} ON node.vid=decision.vid
           LEFT JOIN {informacion} ON node.vid=informacion.vid
           LEFT JOIN {idea} ON node.vid=idea.vid
           LEFT JOIN {oportunidad} ON node.vid=oportunidad.vid
           LEFT JOIN {proyecto} ON node.vid=proyecto.vid
           WHERE created >= %d            
           AND type NOT LIKE 'grupo' AND ".$where_grupo." ORDER BY created DESC";
           $quant->query=$sql;
       }else if($quant->id=='comment_creation1'){
           $sql="SELECT timestamp 
           FROM {comments}
           LEFT JOIN {node} ON comments.nid=node.nid
           LEFT JOIN {og_ancestry} ON node.nid=og_ancestry.nid
           LEFT JOIN {estrategia} ON node.vid=estrategia.vid
           LEFT JOIN {despliegue} ON node.vid=despliegue.vid
           LEFT JOIN {decision} ON node.vid=decision.vid
           LEFT JOIN {informacion} ON node.vid=informacion.vid
           LEFT JOIN {idea} ON node.vid=idea.vid
           LEFT JOIN {oportunidad} ON node.vid=oportunidad.vid
           LEFT JOIN {proyecto} ON node.vid=proyecto.vid
           WHERE timestamp >= %d AND ".$where_grupo." ORDER BY timestamp DESC";
           $quant->query=$sql;
       }else if($quant->id=='user_creation1'){
           $sql="SELECT users.created 
            FROM {users}
            LEFT JOIN {og_uid} ON users.uid=og_uid.uid 
            WHERE users.created >= %d AND ".$where_grupo_og_uid." 
            ORDER BY users.created DESC";
           $quant->query=$sql;
       }else if($quant->id=='number_of_visited_page_group'){
           $sql="SELECT accesslog.timestamp 
           FROM {accesslog}
           LEFT JOIN {og_uid} ON accesslog.uid=og_uid.uid 
           WHERE accesslog.timestamp >= %d AND ".$where_grupo_og_uid." 
           GROUP BY accesslog.aid 
           ORDER BY accesslog.timestamp DESC";
           //print $sql;
           $quant->query=$sql;
       }       
   //}
   //print $quant->id.'<br>';
   //print $quant->id.'='.$quant->query.'<br>';   
   return $quant;
}
//gemini-2014
function quant_my_get_or_array($grupo_nid,$grupo_nid_array=''){
    $result=array();
    //simulando
    //$result[]='1';
    //return $result;
    //
    $my_array=array('estrategia',
    'despliegue',
    'decision',
    'informacion',
    'idea',
    'oportunidad',
    'proyecto');
    if(!empty($my_array)){
        foreach($my_array as $i=>$f){
            if(!empty($grupo_nid_array)){
              $result[]=$f.'.grupo_nid IN('.implode(',',$grupo_nid_array).')';
            }else{
              $result[]=$f.'.grupo_nid='.$grupo_nid;
            }  
        }    
    }
    return $result;
}
//intelsat-2014
function quant_my_set_acumulativo(&$items){
    $node=my_get_node();
    if(isset($node->type) && !empty($node->type) && in_array($node->type,array('collection'))){    
    //if(user_access('root')){    
        $result=0;
        if(!empty($items)){
            foreach($items as $key=>$value){
                if($result>$value){
                    $result=$result+$value;
                    $items[$key]=$result;
                }else{
                    $result=$items[$key];
                }    
            }
        }
    }    
}
//intelsat-2015
function quant_hontza_analytics_access(){ 
    global $user;
    if(isset($user->uid) && !empty($user->uid)){
        if(user_access('view analytics page')){
            return TRUE;
        }
        $modo_estrategia=1;
        if(is_administrador_grupo($modo_estrategia)){
            return TRUE;
        }
        if(red_is_administrador()){
            return TRUE;
        }
    }
    return FALSE;
}
//intelsat-2015
function quant_is_usuarios_estadisticas_acceso(){
    if(is_usuarios_estadisticas(0,'usuarios_acceso')){
        $where_time=hontza_get_usuarios_acceso_where_time();
        if($where_time=='(1)'){
            return 0;
        }
        return 1;
    }
    return 0;
}
//intelsat-2015
function quant_is_fecha_mayor($where_time_in,&$fecha_ini){
    $where_time=$where_time_in;
    $fecha_ini='';
    if(empty($where_time)){
        //$where_time=hontza_get_usuarios_acceso_where_time();
        $where_time=quant_get_usuarios_acceso_where_time_array();
    }
    /*if(quant_is_dos_fechas($where_time)){
        return 0;
    }
    $find='(1 AND timestamp>=';    
    $pos=strpos($where_time,$find);
    if($pos===FALSE){
        return 0;
    }
    $fecha_ini=substr($where_time,$pos+strlen($find));
    $fecha_ini=str_replace(')','',$fecha_ini);
    return 1;*/
    if(isset($where_time['time_end']) && !empty($where_time['time_end'])){
        return 0;
    }
    if(isset($where_time['time_ini']) && !empty($where_time['time_ini'])){
        $fecha_ini=$where_time['time_ini'];
        return 1;
    }
    return 0;
}
//intelsat-2015
function quant_is_fecha_menor($where_time_in,&$fecha_end){
    $where_time=$where_time_in;
    $fecha_end='';
    if(empty($where_time)){
        //$where_time=hontza_get_usuarios_acceso_where_time();
        $where_time=quant_get_usuarios_acceso_where_time_array();
    }
    /*if(quant_is_dos_fechas($where_time)){
        return 0;
    }
    $find='(1 AND timestamp<=';    
    $pos=strpos($where_time,$find);
    if($pos===FALSE){
        return 0;
    }
    $fecha_end=substr($where_time,$pos+strlen($find));
    $fecha_end=str_replace(')','',$fecha_end);    
    return 1;*/
    if(isset($where_time['time_ini']) && !empty($where_time['time_ini'])){
        return 0;
    }
    if(isset($where_time['time_end']) && !empty($where_time['time_end'])){
        $fecha_end=$where_time['time_end'];
        return 1;
    }
    return 0;
}
//intelsat-2015
function quant_is_dos_fechas($where_time){
    /*$my_array=explode(' AND ',$where_time);
    if(count($my_array)>2){
        return 1;
    }
    return 0;*/
    if(isset($where_time['time_ini']) && !empty($where_time['time_ini'])){
        if(isset($where_time['time_end']) && !empty($where_time['time_end'])){
            return 1;
        }
    }
    return 0;
}
//intelsat-2015
function quant_get_fechas($where_time,&$fecha_ini,&$fecha_end){
    /*$fecha_ini='';
    $fecha_end='';
    $my_array=explode(' AND ',$where_time);
    if(count($my_array)>2){
        $fecha_ini=str_replace('timestamp>=','',$my_array[1]);
        $fecha_end=str_replace('timestamp<=','',$my_array[2]);
        $fecha_end=str_replace(')','',$fecha_end);
    }*/
    $fecha_ini=$where_time['time_ini'];
    $fecha_end=$where_time['time_end'];
}
//intelsat-2015
function quant_get_usuarios_acceso_where_time_array($field='timestamp',$key_filter='usuarios_acceso',$ini_field='usuarios_acceso_fecha_inicio',$end_field='usuarios_acceso_fecha_fin'){
    $result=array();
    $time_ini='';
    $time_end='';
    $ini=hontza_get_gestion_usuarios_filter_value($ini_field,$key_filter);
    $end=hontza_get_gestion_usuarios_filter_value($end_field,$key_filter);
    if(!empty($ini)){
        $time_ini=strtotime($ini);
    }    
    if(!empty($end)){    
        $time_end=strtotime($end);
        //23:59:59 hora
        $time_end=$time_end+(24*60*60)-1;    
    }
    //
    $result['time_ini']=$time_ini;
    $result['time_end']=$time_end;
    //
    return $result;
}
function quant_set_item_labels($items,$chart){
    if(isset($chart['#chart_id']) && !empty($chart['#chart_id'])){
       if($chart['#chart_id']=='node_creation_by_type1'){
           $tipos_array=hontza_define_tipo_informacion_options(0,1);
           if(!empty($items)){
               $result=array();
               foreach($items as $type=>$value){
                   $label=$type;
                   if(isset($tipos_array[$type])){
                       $label=quant_get_type_node_label($tipos_array[$type]);                       
                   }
                   $result[$label]=$value;
               }
               return $result;
           }
       }
    }
    return $items;
}
function quant_get_type_node_label($value){
    $label=$value;
    $pos=strpos($label,'-');
    if($pos===FALSE){
        return $value;
    }else{
        $label=substr($label,$pos+1);
    }
    return $label;
}