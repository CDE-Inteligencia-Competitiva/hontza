<?php

/**
 * @file
 * This is an example outlining how a module can be used to define a newg
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node type will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database table as
 * defined in decision_schema().
 */

/**
 * @defgroup decision Example: Node
 * @ingroup examples
 * @{
 * Creating a new content type in a module. (drupal 6)
 *
 * This is an example outlining how a module can be used to define a new
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node type will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database table as
 * defined in decision_schema().
 *
 * This example is part of the Examples for Developers Project which you can download
 * and experiment with here: http://drupal.org/project/examples
 */

/**
 * Implementation of hook_menu().
 */
function decision_menu() {
  $items['decisiones'] = array(
    'title' => 'decision',
    'page callback' => 'decision_list_callback',
    'access arguments' => array('Ver decision_list'),
  );
  return $items;
}

/**
 * Explain how the module demonstrates a new node type.decision.test
 */
//intelsat-2016
//function decision_list_callback() {
function decision_list_callback($is_array=0) {
  global $user;
  estrategia_active_tabs_access();
  //gemini-2014
  hontza_grupo_shared_active_tabs_access();
  //
  //intelsat-2016
  $decision_array=array();
  $where=array();
  //
  $where[]='n.promote = 1';
  $where[]='n.status = 1';
  $where[]='n.type="decision"'; 
  //
  /*$my_grupo=og_get_group_context(); 
  if(!empty($my_grupo) && isset($my_grupo->nid) && !empty($my_grupo->nid)){
	$where[]='e.grupo_nid='.$my_grupo->nid;
  }*/
  $empresa_nid=my_get_empresa_nid();

  //print 'oportunidad_nid(list)='.$oportunidad_nid.'<BR>';
  /*if(!empty($empresa_nid)){
    $where[]='d.empresa_nid='.$empresa_nid;
  }*/
  //
  $num_rows = FALSE;
  $my_limit=variable_get('default_nodes_main', 10);
  //if(!empty($empresa_nid) || $user->uid==1){
  if(is_where_estrategia_por_grupo()){
      $where_grupo=get_where_estrategia_por_grupo("de","decision");
      if(!empty($where_grupo)){
          $where[]=$where_grupo;
      }
      //
      $despliegue_nid=my_get_decision_despliegue_nid();
      //print 'idea_nid(list)='.$idea_nid.'<BR>';
      if(!empty($despliegue_nid) && $despliegue_nid!='todas'){
            $where[]='d.despliegue_nid='.$despliegue_nid;
      }
      //$order_by=' ORDER BY n.sticky DESC, n.created DESC';
      //$order_by=' ORDER BY n.sticky DESC, n.created ASC';
      //$order_by=' ORDER BY d.peso ASC,n.sticky DESC, n.created ASC';
      $order_by=' ORDER BY d.valor_decision ASC,n.sticky DESC, n.created ASC';
      //
      $sql='SELECT n.nid, n.sticky, n.created
      FROM {node} n
      LEFT JOIN {decision} d ON n.nid=d.nid
      LEFT JOIN {despliegue} de ON d.despliegue_nid=de.nid
      WHERE '.implode(' AND ',$where).$order_by;

      $result = db_query($sql);

      $output = '';
      $output = create_menu_estrategias_list();
      if(is_estrategia('decisiones')){
        $output = create_menu_estrategias_list();
      }
      //$num_rows = FALSE;
     // $rows=array();
      $kont=0;
      while ($node = db_fetch_object($result)) {
        //$my_list[$kont]=node_view(node_load($node->nid), 1);
        $my_node=node_load($node->nid);
        //gemini-2013
        $my_list[$kont]=new stdClass();
        //$my_node->votingapi_cache_node_average_value=$node->votingapi_cache_node_average_value;
        $my_list[$kont]->view=node_view($my_node, 1);
        $votos_list=get_idea_votos_list($node->nid);
        $my_list[$kont]->suma_votos= get_suma_votos($votos_list);
        //intelsat-2016
        if($is_array){
            $decision_array[]=$my_node;
        }
        $kont++;        
        $num_rows = TRUE;
      }
      if(estrategia_is_grupo_estrellas()){
        $my_list=array_ordenatu($my_list,'suma_votos','desc',1);
      }
      $my_list=my_set_estrategia_pager($my_list,$my_limit);
      $output.=set_array_view_html($my_list);
  }

  //intelsat-2016
  //intelsat-2017
  //if($is_array){
  if(is_numeric($is_array) && $is_array){  
    return $decision_array;
  }  
  
  if ($num_rows) {
    /*$feed_url = url('decision_rss.xml', array('absolute' => TRUE));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') . ' ' . t('RSS'));*/
    /*
	$headers=array('nide','title');
	$output .= theme('table',$headers,$rows);
	*/
	$output .= theme('pager', NULL, $my_limit);
  }
  else {
 
    $output = '<div id="first-time">' .t('There are no decisions'). '</div>';
  }
  drupal_set_title(t('List of Decisions'));

  return $output;
}
/**
 * Implementation of hook_node_info().
 *
 * This is a required node hook. This function describes the nodes provided by
 * this module.
 *
 * The required attributes are:
 * - "name" provides a human readable name for the node,
 * - "module" tells Drupal how the module's functions map to hooks (i.e. if the
 *   module is decision_foo then decision_foo_insert will be called
 *   when inserting the node).
 * - "description" provides a brief description of the node type, which is
 *   shown when a user accesses the "Create content" page for that node type.
 *
 * The other optional, attributes:
 * - "has_title" boolean that indicates whether or not this node type has a
 *   title field.
 * - "title_label": the label for the title field of this content type.
 * - "has_body": boolean that indicates whether or not this node type has a
 *   body field.
 * - "body_label": the label for the body field of this content type.
 * - "min_word_count": the minimum number of words for the body field to be
 *   considered valid for this content type.
 *
 * The key in this example, "example_node_type_1", is the "machine name" of the
 * node type and is stored in {node}.type. The node's type value cannot be
 * changed through the admin interface.
 *
 */
function decision_node_info() {
  return array(
    'decision' => array(
      'name' => t('decision'),
      'module' => 'decision',
      'description' => t("decision"),
      'has_title' => TRUE,
      'title_label' => t('Decision'),
      'has_body' => TRUE,
      'body_label' => t('Full Text'),
    )
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function decision_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create decision', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any decision', $account) || (user_access('edit own decision', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any decision', $account) || (user_access('delete own decision', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function decision_perm() {
  return array(
    'create decision',
    'delete own decision',
    'delete any decision',
    'edit own decision',
    'edit any decision',
    'Ver decision_list',
  );
}

/**
 * Implementation of hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array with
 * a sub array containing information for each element in the form.
 */
function decision_form(&$node, $form_state) {  
  /*$empresa_nid=my_get_empresa_nid();
  print 'empresa_nid='.$empresa_nid.'<BR>';*/
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  //gemini-2014
  $nid='';  
  if(isset($node->nid) && !empty($node->nid)){
      $nid=$node->nid;
      drupal_set_title(estrategia_set_title_max_len($node->title));
  }   
  estrategia_active_tabs_access();
  //gemini-2014
  hontza_grupo_shared_active_tabs_access();
  //if(!is_administrador_grupo()){
  if(!decision_is_admin_content()){  
      drupal_access_denied();
      exit();
  }  
    
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
      //gemini-2014  
      '#maxlength'=>175,    
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  //gemini
  $despliegue_nid=my_get_decision_despliegue_nid();
  //print 'idea_nid(form)='.$idea_nid.'<BR>'; 
  //$form['despliegue_nid'] = array('#type' => 'hidden', '#value' => $despliegue_nid);
   $form['decision_guraso_fieldset']=create_decision_guraso_fieldset($node->nid,$despliegue_nid,$node->despliegue_nid);

  // Now we define the form elements specific to our node type.
  
  /*$form['valor_decision'] = array(
    '#type' => 'textfield',
    '#title' => t('Valor decision'),
    '#default_value' => $node->valor_decision,
  );*/

  $form['valor_decision']=array(
  '#type' => 'select',
  '#title' => t('Value of Decision'),
  '#default_value' => $node->valor_decision,
  '#options'=>my_get_evaluacion_options('','valor_decision'),
  '#required' => FALSE
);

$fecha_cumplimiento_default=decision_get_fecha_cumplimiento_default($node->fecha_cumplimiento,$despliegue_nid);
$no_control_date_default=decision_get_no_control_date_default($nid,$node->no_control_date,$despliegue_nid);  
estrategia_inc_define_control_date_fs($fecha_cumplimiento_default,$no_control_date_default, $form); 
  //    

  /*$grupo_seguimiento_nid=get_decision_seguimiento_default_value($node,$despliegue_nid);
  //print 'grupo_seguimiento_nid='.$grupo_seguimiento_nid.'<BR>';
  $form['grupo_seguimiento_nid'] = array(
  '#type' => 'select',
  '#title' => t('Working Group'),
  '#default_value' => $grupo_seguimiento_nid,
  '#options'=>my_get_grupo_seguimiento_options(),
  '#multiple'=>FALSE,
  //'#size'=>10,
  '#required' => FALSE
);*/

 /*$form['peso'] = array(
      '#type' => 'textfield',
      '#title' => t('Peso'),
      '#required' => FALSE,
      '#default_value' => $node->peso,
      //'#weight' => -5
    );*/

  //gemini
 if(!isset($node->nid) || empty($node->nid)){
    drupal_set_title(t('Add Decision'));
 }
 //

  return $form;
}

/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function decision_validate($node, &$form) {
  //gemini-2014
  estrategia_inc_add_no_control_date_js();
  //  
  if (!validate_sel_despliegue($node)) {
    form_set_error('sel_despliegue', t('Select SubChallenge is required'));
  }
}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function decision_insert($node) {
  global $user;
  //$fecha=mktime();
  $origen_uid=$user->uid;
  $grupo_nid=0;
  $my_grupo=og_get_group_context(); 
  if(!empty($my_grupo) && isset($my_grupo->nid) && !empty($my_grupo->nid)){
	$grupo_nid=$my_grupo->nid; 
  }
  $empresa_nid=my_get_empresa_nid();
  $despliegue_nid=set_despliegue_seleccionado($node);
  $fecha_cumplimiento=my_mktime($node->fecha_cumplimiento);
  
  //
  //$sql=sprintf("INSERT INTO {decision} (vid, nid, empresa_nid, origen_uid,grupo_nid,despliegue_nid,valor_decision,grupo_seguimiento_nid,peso) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d)", $node->vid, $node->nid, $empresa_nid, $origen_uid,$grupo_nid,$despliegue_nid,$node->valor_decision,$node->grupo_seguimiento_nid,$node->peso);
  $sql=sprintf("INSERT INTO {decision} (vid, nid, empresa_nid, origen_uid,grupo_nid,despliegue_nid,valor_decision,peso,fecha_cumplimiento,no_control_date) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $node->vid, $node->nid, $empresa_nid, $origen_uid,$grupo_nid,$despliegue_nid,$node->valor_decision,$node->peso,$fecha_cumplimiento,$node->no_control_date);
  db_query($sql);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function decision_update($node) {
  $fecha_cumplimiento=my_mktime($node->fecha_cumplimiento);  
  // if this is a new node or we're adding a new revision,    
  if ($node->revision) {
    decision_insert($node);
  }
  else {
    $despliegue_nid=set_despliegue_seleccionado($node);
    //db_query("UPDATE {decision} SET valor_decision = %d, grupo_seguimiento_nid = %d, peso = %d, despliegue_nid = %d WHERE vid = %d", $node->valor_decision,$node->grupo_seguimiento_nid, $node->peso,$despliegue_nid,$node->vid);
    db_query("UPDATE {decision} SET valor_decision = %d, peso = %d, despliegue_nid = %d,fecha_cumplimiento = %d,no_control_date = %d WHERE vid = %d", $node->valor_decision,$node->peso,$despliegue_nid,$fecha_cumplimiento,$node->no_control_date,$node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function decision_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {decision} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from our table.
 */
function decision_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  $decision_nid=$node->nid;
  db_query('DELETE FROM {decision} WHERE nid = %d', $node->nid);
  delete_informacion_list($decision_nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function decision_load($node) {
  //$sql=sprintf('SELECT d.nid as decision_nid,d.vid as decision_vid,d.empresa_nid,d.origen_uid,d.grupo_nid,d.despliegue_nid,d.valor_decision,d.grupo_seguimiento_nid,d.peso FROM {decision} d WHERE vid = %d', $node->vid);
  $sql=sprintf('SELECT d.nid as decision_nid,d.vid as decision_vid,d.empresa_nid,d.origen_uid,d.grupo_nid,d.despliegue_nid,d.valor_decision,d.peso,d.fecha_cumplimiento,d.no_control_date FROM {decision} d WHERE vid = %d', $node->vid);
  $additions = db_fetch_object(db_query($sql));
  if(isset($additions->decision_nid) && !empty($additions->decision_nid)){
      $additions->grupo_seguimiento_link=get_decision_grupo_seguimiento_link($additions->grupo_seguimiento_nid,$additions->despliegue_nid);
      $additions->fecha_cumplimiento=set_date_array($additions->fecha_cumplimiento);
      $additions->valor_decision_name=get_eval_label($additions->valor_decision, 'valor_decision');
      $votos_list=get_idea_votos_list($additions->decision_nid);
      $additions->suma_votos=get_suma_votos($votos_list);
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function decision_view($node, $teaser = FALSE, $page = FALSE) {
  $breadcrumb=array("aaaa");
  drupal_set_breadcrumb($breadcrumb);
  $node = node_prepare($node, $teaser);
  $node->content['myfield'] = array(
    '#value' => theme('decision_order_info', $node),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function decision_theme() {
  return array(
    'decision_order_info' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish. We also wrap the default
 * presentation in a CSS class that is prefixed by the module name. This
 * way, style sheets can modify the output without requiring theme code.
 */
function theme_decision_order_info($node) {
  $output = '<div class="decision_order_info">';
  $output .= t('The order is for %quantity %color items.', array('%quantity' => check_plain($node->quantity), '%color' => check_plain($node->color)));
  $output .= '</div>';
  return $output;
}

/**
 * @} End of "defgroup decision".
 */
 
//gemini
function decision_block($op = 'list', $delta = 0, $edit = array()) {
 	switch ($op) {
    	case 'list':
 			$blocks[600]['info'] = t('Decisions');
			return $blocks;
			break;
		case 'view':
			$block=my_decision_view_block($delta);
   			return $block;
		default:
			break;
	}
}

//gemini
function my_decision_view_block($delta){
	$block=array();
	switch($delta){
		case 600:
                        if(user_access('Ver decision_list')){
                            //intelsat-2015
                            $title=t('Decisions');
                            $block['subject'] = get_decision_simbolo_img(1,$title).$title;
                            $block['content'] = get_gestionar_decision_content();
                        }
			break;
		default:
			break;	 
 	}
    return $block;
}
//gemini
function get_gestionar_decision_content(){
    if(!repase_access(1)){
        return '';
    }
    //gemini-2014
    if(!hontza_grupo_shared_active_tabs_access(1)){
        return '';
    }
	$despliegue_nid=my_get_decision_despliegue_nid();
        if(empty($despliegue_nid)){
           $despliegue_nid='todas';
        }
	$result=array();
        if(decision_is_admin_content()){
            //intelsat-2015
            $icono=my_get_icono_action('add_left',t('Add Decision')).'&nbsp;';
            $result[]=$icono.l(t('Add Decision'),'node/add/decision/'.$despliegue_nid);
        }
        if($despliegue_nid!='todas'){
            $result[]=l(t('My SubChallenge'),'node/'.$despliegue_nid);
        }
        $result[]=l(t('List of Decisions'),'decisiones/'.$despliegue_nid);
	/*$result[]=l(t('Estrategia-Fuentes'),'estrategias/tabla');
        $result[]=l(t('Strategy-Groups'),'estrategias/arbol');*/
	return implode('<BR>',$result);
}
//gemini
function is_decision_left(){
	if(is_decision()){
		return 1;
	}
	$node=my_get_node();
	//echo print_r($node,1);exit();
	if(!empty($node) && isset($node->nid) && !empty($node->nid) && strcmp(arg(2),'edit')==0){
		//if(in_array($node->type,array('item'))){
		if(strcmp($node->type,'decision')==0){			
			return 1;
		}
	}
	
	if(is_ficha_node_left('decision','decision')){
		return 1;
	}			
	return 0;
}
//gemini
function add_js_decision(){
	if(is_decision()){
		my_add_active_trail_js('id_a_estrategia');		
	}
}
//gemini
function is_decision(){
	if(strcmp(arg(0),'decision')==0){
		return 1;
	}
	if(strcmp(arg(0),'decisiones')==0){
		return 1;
	}
	if(is_ficha_node('decision')){
		return 1;
	}	
	return 0;
}
//gemini
function my_class_primera_decision($node,$page){
	if(empty($page) && is_node_primera_ayuda($node,array('decision'))){
		return ' my_primera_noticia';
	}
	return '';
}
//gemini
function my_help_primera_decision($node){
	if(is_node_primera_ayuda($node,array('decision'))){
		if(is_add_primera_proyecto(0,'decision')){
			$my_is_mouse_over=1;
			//$my_is_mouse_over=0;
			//return help_popup_window(13179, 'help',my_get_help_link_object(),0,0,2,$my_is_mouse_over);
			return help_popup_window('', 'help',my_get_help_link_object(),0,0,3,$my_is_mouse_over);
		}
	}	
	return '';
}
//gemini
function my_get_decision_despliegue_nid(){
	$despliegue_nid='';
	if(strcmp(arg(0),'decisiones')==0){
		return arg(1);
	}	
	if(strcmp(arg(0),'node')==0){
		if(strcmp(arg(1),'add')==0 && strcmp(arg(2),'decision')==0 && is_numeric(arg(3))){
			return arg(3);
		}else{ 
			if(is_ficha_node('decision')){
				$node=my_get_node();
				if(!empty($node) && isset($node->nid) && !empty($node->nid)){
					return $node->despliegue_nid;
				}
			}	
		}
	}
	return $despliegue_nid;
}
//gemini
function delete_informacion_list($decision_nid){
	$informacion_list=get_decision_informacion_list($decision_nid);
	if(count($informacion_list)>0){
		foreach($informacion_list as $i=>$row){
			$node=node_load($row->nid);
			informacion_delete($node);
			//print $node->nid.'<BR>';
			node_delete($node->nid);
		}
	}
}
//gemini
function get_decision_informacion_list($decision_nid){
	$result=array();
	$where=array();
	$where[]="1";
	$where[]='i.decision_nid='.$decision_nid;
	//$sql="SELECT n.*,i.peso,i.decision_nid,i.grupo_seguimiento_nid
        $sql="SELECT n.*,i.peso,i.decision_nid 
	FROM {node} n LEFT JOIN
        {informacion} i ON n.nid=i.nid
	WHERE ".implode(" AND ",$where)."
	ORDER BY i.peso ASC,n.created ASC";
	//print $sql;exit();
	$res=db_query($sql);
	while($row=db_fetch_object($res)){
		$result[]=$row;
	}
	return $result;
}
//gemini
function get_decision_grupo_seguimiento_link($grupo_seguimiento_nid,$despliegue_nid){
     if(!empty($grupo_seguimiento_nid)){
        $result=get_grupo_seguimiento_link($grupo_seguimiento_nid);
        return $result;
    }
    //
    //$decision=node_load($decision_nid);
    $despliegue=node_load($despliegue_nid);
    return get_despliegue_grupo_seguimiento_link($despliegue->grupo_seguimiento_nid,$despliegue->estrategia_nid);
}
//gemini
function get_decision_seguimiento_default_value($node,$despliegue_nid){
    if(!empty($node->grupo_seguimiento_nid)){
        return $node->grupo_seguimiento_nid;
    }
    //
    //$decision=node_load($decision_nid);
    $despliegue=node_load($despliegue_nid);
    return get_despliegue_seguimiento_default_value($despliegue,$despliegue->estrategia_nid);
}
function create_decision_guraso_fieldset($decision_nid,$despliegue_nid,$node_despliegue_nid){
    $result=array(
    '#type'=>'fieldset',
    '#title'=>t('Select SubChallenge'),
    //'#description'=>$description
    );

    $sel_despliegue_nid=$node_despliegue_nid;

    if(empty($decision_nid)){
        $sel_despliegue_nid=$despliegue_nid;
    }

    $rows=get_sel_estrategia_arbol_rows(0);
    $rows=prepare_estrategia_arbol_by_pro($rows,2);
    //echo print_r($rows,1);
    if(count($rows)>0){
        foreach($rows as $i=>$r){
            //echo print_r($r,1);
            $pro=$r['my_level'];
            //print $pro.'<BR>';
            if($pro==2){
                $result[$r['nid']] = array(
                '#required' => TRUE,
                '#type' => 'checkbox',
                '#prefix' => '<div class=taxo'. ($pro-1) .'>',
                '#suffix' => '</div>',
                '#title' => $r['title']
              );
              if(!empty($sel_despliegue_nid) && $r['nid']==$sel_despliegue_nid){
                     $result[$r['nid']]['#attributes']=array('checked' => 'checked');
              }
            }else{
              $result['my_estrategia_'.$r['nid']]['#value']='<div class=taxo'. ($pro-1) .'>'.get_estrategia_simbolo_img().$r['title'].'</div>';
            }
        }
    }

    $keys=array_keys($result);
    $keys=get_numeric_values($keys);
    add_js_txek_sel_idea($keys);

    return $result;
}
function validate_sel_despliegue($node){

        $despliegue_nid=set_despliegue_seleccionado($node);
        if(empty($despliegue_nid)){
            return 0;
        }
        return 1;
    
}
function set_despliegue_seleccionado($node){
    return set_idea_seleccionada($node);
}
function get_decision_simbolo_img($is_taula_header=0,$title_in=''){
    //intelsat-2016
    global $base_url;
    $html=array();
    //intelsat-2015
    if(empty($title_in)){
        $title=$title_in;
    }else{
        $title=t('Decisions');
    }
    //
    //gemini-2014
    $style=estrategia_get_simbolo_style($is_taula_header); 
    //
    $html[]='<img '.$style.' src="'.$base_url.'/sites/default/files/my_images/decision.png" alt="'.$title.'" title="'.$title.'"/>';
    if(!$is_taula_header){
        $html[]='&nbsp;';
    }
    return implode('',$html);
}
function get_title_decision_simbolo_img(){
    global $base_url;
    $html=array();
    $html[]='<img src="'.$base_url.'/sites/default/files/my_images/decision_title.png"/>';
    return implode('',$html);
}
function my_help_decision(){
    $param=arg(1);
    //
    if(strcmp(arg(0),'node')==0 && strcmp(arg(1),'add')==0 && strcmp(arg(2),'decision')==0){
        return help_popup_window(15315, 'help',my_get_help_link_object());
    }else if(strcmp(arg(0),'decisiones')==0 && (empty($param) || strcmp(arg(1),'todas')==0) || is_numeric($param)){
        //return help_popup_window(15316, 'help',my_get_help_link_object());
        return help_decision_list();
    }

    return '';
}
function help_decision_list(){
    return help_popup_window(15316, 'help',my_get_help_link_object());
}
function decision_is_admin_content(){
    return estrategia_is_admin_content();
}
function decision_get_status_color($node){
    return estrategia_get_status_color($node);
}
//gemini
function decision_get_fecha_cumplimiento_default($fecha_cumplimiento,$despliegue_nid){
    if(empty($fecha_cumplimiento)){
        if(!empty($despliegue_nid)){
            $despliegue=node_load($despliegue_nid);
            if(isset($despliegue->nid) && !empty($despliegue->nid)){
                return $despliegue->fecha_cumplimiento;
            }
        }else{
            return estrategia_define_fecha_cumplimiento('');
        }    
    }
    return $fecha_cumplimiento;
}
function decision_delete_link($node){
    return hontza_item_delete_link($node);
}
function decision_node_delete_confirm_form_alter(&$form,&$form_state,$form_id){
    $form['#redirect']='decisiones/todas';
}
function decision_add_link($node){
    $label=t('Add Decision');
    $label='';
    return l($label,'node/add/decision/'.$node->nid,array('attributes'=>array('title'=>t('Add Decision'),'alt'=>t('Add Decision'))));
}
function decision_node_form_alter(&$form,&$form_state,$form_id){
   $url_cancel='decisiones/todas';
   hontza_set_form_buttons($url_cancel,$form);    
}
function decision_get_all(){
    $result=array();
    $sql='SELECT * FROM {decision} d WHERE 1';
    $res=db_query($sql);
    while($row=db_fetch_object($res)){
        $result[]=$row;
    }
    return $result;
}
function decision_comment_link($node){
    return hontza_item_comment_link($node);
}
function decision_edit_link($node){
    return hontza_item_edit_link($node);
}
//gemini-2014
function decision_delete_all($grupo_nid){
    $decision_array=decision_get_grupo_all($grupo_nid);
    if(!empty($decision_array)){
        foreach($decision_array as $i=>$row){
            node_delete($row->nid);
        }
    }
}
//gemini-2014
function decision_get_grupo_all($grupo_nid){
    $result=array();
    if(!empty($grupo_nid)){
        $where=array();
        $where[]='1';
        //$where[]='(d.grupo_nid='.$grupo_nid.' OR d.grupo_seguimiento_nid='.$grupo_nid.')';
        $where[]='d.grupo_nid='.$grupo_nid;
        $where[]='n.type="decision"';
        $sql='SELECT n.* 
        FROM {node} n 
        LEFT JOIN {decision} d ON n.vid=d.vid
        WHERE '.implode(' AND ',$where);
        $res=db_query($sql);
        while($row=db_fetch_object($res)){
            $result[]=$row;
        }
    }
    return $result;
}
//gemini-2014
function decision_exist($title,$grupo_nid,$despliegue,&$node){
    $where=array();
    $where[]='1';
    $where[]='d.grupo_nid='.$grupo_nid;
    $where[]='n.type="decision"';
    $where[]='n.title="'.$title.'"';
    $sql='SELECT n.* 
    FROM {node} n 
    LEFT JOIN {decision} d ON n.vid=d.vid 
    WHERE '.implode(' AND ',$where);
    $res=db_query($sql);
    while($row=db_fetch_object($res)){
        $node=node_load($row->nid);
        if(isset($node->nid) && !empty($node->nid)){
            if(isset($node->despliegue_nid) && !empty($node->despliegue_nid)){
                if($node->despliegue_nid==$despliegue->nid){
                    return 1;
                }    
            }    
        }    
    }
    $node=new stdClass();
    return 0;
}
//gemini-2014
function decision_get_no_control_date_default($nid,$no_control_date,$despliegue_nid){
    if(empty($nid)){
        if(!empty($despliegue_nid)){
            $despliegue=node_load($despliegue_nid);
            if(isset($despliegue->nid) && !empty($despliegue->nid)){
                //echo print_r($estrategia->fecha_cumplimiento,1).'<BR>';
                return $despliegue->no_control_date;
            }
        }   
    }
    return $no_control_date;
}
//intelsat-2016
function decision_update_despliegue_suma_votos_array(){
    $is_array=1;
    $decision_array=decision_list_callback($is_array);
    if(!empty($decision_array)){
                    foreach($decision_array as $i=>$decision_row){
                        decision_inc_update_suma_votos($decision_row->nid,$decision_row->vid,$decision_row->suma_votos);
                    }
                }
}
//intelsat-2016
function decision_inc_update_suma_votos($nid,$vid,$suma_votos){
    db_query('UPDATE {decision} SET suma_votos=%f WHERE nid=%d AND vid=%d',$suma_votos,$nid,$vid);
}
//intelsat-2016
function decision_inc_get_order_by($order_by){
    $result=$order_by;
    if(estrategia_inc_is_ordenar_suma_votos()){
        //$result=" ORDER BY n.created ASC";
        $result=" ORDER BY d.suma_votos DESC,d.peso ASC,n.created ASC";
       
    }

    return $result;
}