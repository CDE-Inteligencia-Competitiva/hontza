<?php

/**
 * @file
 * This is an example outlining how a module can be used to define a new
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node type will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database table as
 * defined in informacion_schema().
 */

/**
 * @defgroup informacion Example: Node
 * @ingroup examples
 * @{
 * Creating a new content type in a module. (drupal 6)
 *
 * This is an example outlining how a module can be used to define a new
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node type will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database table as
 * defined in informacion_schema().
 *
 * This example is part of the Examples for Developers Project which you can download
 * and experiment with here: http://drupal.org/project/examples
 */

/**
 * Implementation of hook_menu().
 */
function informacion_menu() {
  $items['informaciones'] = array(
    'title' => 'information',
    'page callback' => 'informacion_list_callback',
    'access arguments' => array('Ver informacion_list'),
  );
  return $items;
}

/**
 * Explain how the module demonstrates a new node type.informacion.test
 */
function informacion_list_callback() {
  estrategia_active_tabs_access();
  hontza_grupo_shared_active_tabs_access();
  global $user;
  //
  /*$where=array();
  //
  $where[]='n.promote = 1';
  $where[]='n.status = 1';
  $where[]='n.type="informacion"'; 
  //
  //$my_grupo=og_get_group_context(); 
  //if(!empty($my_grupo) && isset($my_grupo->nid) && !empty($my_grupo->nid)){
  //	$where[]='e.grupo_nid='.$my_grupo->nid;
  //}
  $empresa_nid=my_get_empresa_nid();
  //print 'oportunidad_nid(list)='.$oportunidad_nid.'<BR>';
  //if(!empty($empresa_nid)){
  //	$where[]='i.empresa_nid='.$empresa_nid;
  //}
  //
  $num_rows = FALSE;
  //if(!empty($empresa_nid) || $user->uid==1){
  if(is_where_estrategia_por_grupo()){
      $where_grupo=get_where_estrategia_por_grupo("de","informacion");
      if(!empty($where_grupo)){
          $where[]=$where_grupo;
      }
      $decision_nid=my_get_informacion_decision_nid();
      //print 'idea_nid(list)='.$idea_nid.'<BR>';
      if(!empty($decision_nid) && $decision_nid!='todas'){
            $where[]='i.decision_nid='.$decision_nid;
      }
      //$order_by=' ORDER BY n.sticky DESC, n.created DESC';
      //$order_by=' ORDER BY n.sticky DESC, n.created ASC';
      //$order_by=' ORDER BY i.peso ASC,n.sticky DESC, n.created ASC';
      $order_by=' ORDER BY i.importancia ASC,n.sticky DESC, n.created ASC';
      //
      $sql='SELECT n.nid, n.sticky, n.created
      FROM {node} n
      LEFT JOIN {informacion} i ON n.nid=i.nid
      LEFT JOIN {decision} decision ON i.decision_nid=decision.nid
      LEFT JOIN {despliegue} de ON decision.despliegue_nid=de.nid
      WHERE '.implode(' AND ',$where).$order_by;*/
  
  $sql=informacion_define_list_sql();

  if(is_where_estrategia_por_grupo()){
  
      //$result = pager_query(db_rewrite_sql($sql), variable_get('default_nodes_main', 10));

      $my_limit=variable_get('default_nodes_main', 10);
      $result = db_query($sql);

      $output = '';
      $output=create_menu_estrategias_list();
      if(is_estrategia('informaciones')){
        $output = create_menu_estrategias_list();
      }
      //$num_rows = FALSE;
     // $rows=array();
      $my_list=array();
      $kont=0;
      while ($node = db_fetch_object($result)) {
        //$output .= node_view(node_load($node->nid), 1);
            /*$my_node=node_load($node->nid);
            $rows[]=array($my_node->nid,$my_node->title);*/
        $my_node=node_load($node->nid);
        //gemini-2013
        $my_list[$kont]=new stdClass();
        $my_list[$kont]->view=node_view($my_node, 1);
        $my_list[$kont]->puntuacion_total=$my_node->puntuacion_total;
        $kont++;
        $num_rows = TRUE;
      }

      $is_numeric=1;
      $my_list=array_ordenatu($my_list, 'puntuacion_total', 'desc', $is_numeric);
      $my_list=my_set_estrategia_pager($my_list,$my_limit);
      //$output .=implode('',$my_list);
      $output.=set_array_view_html($my_list);
  }
  //
  if ($num_rows) {
    /*$feed_url = url('informacion_rss.xml', array('absolute' => TRUE));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') . ' ' . t('RSS'));*/
    /*
	$headers=array('nide','title');
	$output .= theme('table',$headers,$rows);
	*/
	$output .= theme('pager', NULL, $my_limit);
  }
  else {
 
    $output = '<div id="first-time">' .t('There are no Key Questions'). '</div>';
  }
  //drupal_set_title(t('List of Information'));
  drupal_set_title(t('List of Key Questions'));
  return $output;
}
/**
 * Implementation of hook_node_info().
 *
 * This is a required node hook. This function describes the nodes provided by
 * this module.
 *
 * The required attributes are:
 * - "name" provides a human readable name for the node,
 * - "module" tells Drupal how the module's functions map to hooks (i.e. if the
 *   module is informacion_foo then informacion_foo_insert will be called
 *   when inserting the node).
 * - "description" provides a brief description of the node type, which is
 *   shown when a user accesses the "Create content" page for that node type.
 *
 * The other optional, attributes:
 * - "has_title" boolean that indicates whether or not this node type has a
 *   title field.
 * - "title_label": the label for the title field of this content type.
 * - "has_body": boolean that indicates whether or not this node type has a
 *   body field.
 * - "body_label": the label for the body field of this content type.
 * - "min_word_count": the minimum number of words for the body field to be
 *   considered valid for this content type.
 *
 * The key in this example, "example_node_type_1", is the "machine name" of the
 * node type and is stored in {node}.type. The node's type value cannot be
 * changed through the admin interface.
 *
 */
function informacion_node_info() {
  return array(
    'informacion' => array(
      'name' => t('Key Question'),
      'module' => 'informacion',
      'description' => t("information"),
      'has_title' => TRUE,
      'title_label' => t('Key Question'),
      'has_body' => TRUE,
      'body_label' => t('Full Text'),
    )
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function informacion_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create informacion', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any informacion', $account) || (user_access('edit own informacion', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any informacion', $account) || (user_access('delete own informacion', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function informacion_perm() {
  return array(
    'create informacion',
    'delete own informacion',
    'delete any informacion',
    'edit own informacion',
    'edit any informacion',
    'Ver informacion_list',
  );
}

/**
 * Implementation of hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array with
 * a sub array containing information for each element in the form.
 */
function informacion_form(&$node, $form_state) {  
  /*$empresa_nid=my_get_empresa_nid();
  print 'empresa_nid='.$empresa_nid.'<BR>';*/
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  //gemini-2014
  $nid='';  
  if(isset($node->nid) && !empty($node->nid)){
      $nid=$node->nid;
      drupal_set_title(estrategia_set_title_max_len($node->title));
  }  
  hontza_grupo_shared_active_tabs_access();
  //
  estrategia_active_tabs_access();  
  //if(!is_administrador_grupo()){
  if(!informacion_is_admin_content()){  
      drupal_access_denied();
      exit();
  }    
    
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      //'#title' => check_plain($type->title_label),
      '#title' => check_plain(t('Key Question')),  
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
      //gemini-2014  
      '#maxlength'=>175,  
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    //$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    $form['body_field'] = node_body_field($node,t('Full Text'), $type->min_word_count);  
  }

  //gemini
  $decision_nid=my_get_informacion_decision_nid();
  //print 'idea_nid(form)='.$idea_nid.'<BR>'; 
  //$form['decision_nid'] = array('#type' => 'hidden', '#value' => $decision_nid);
  $form['informacion_guraso_fieldset']=create_informacion_guraso_fieldset($node->nid,$decision_nid,$node->decision_nid);


  // Now we define the form elements specific to our node type.
  
  /*$form['importancia'] = array(
    '#type' => 'textfield',
    '#title' => t('Importance'),
    '#default_value' => $node->importancia,
  );*/

  $form['importancia']=array(
  '#type' => 'select',
  '#title' => t('Importance'),
  '#default_value' => $node->importancia,
  '#options'=>my_get_evaluacion_options('','importancia'),
  '#required' => FALSE
);

  $form['accesibilidad']=array(
  '#type' => 'select',
  '#title' => t('Accessibility'),
  '#default_value' => $node->accesibilidad,
  '#options'=>my_get_evaluacion_options('','accesibilidad'),
  '#required' => FALSE
);

  
$fecha_cumplimiento_default=informacion_get_fecha_cumplimiento_default($node->fecha_cumplimiento,$decision_nid);
$no_control_date_default=informacion_get_no_control_date_default($nid,$node->no_control_date,$decision_nid);  
estrategia_inc_define_control_date_fs($fecha_cumplimiento_default,$no_control_date_default, $form);  
  
  /*$form['esfuerzo'] = array(
    '#type' => 'textfield',
    '#title' => t('Esfuerzo'),
    '#default_value' => $node->esfuerzo,
  );*/
  
  /*$form['puntuacion_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total punctuation'),
    '#default_value' => $node->puntuacion_total,
  );*/
  
  /*$form['numero_ranking'] = array(
    '#type' => 'textfield',
    '#title' => t('Ranking'),
    '#default_value' => $node->numero_ranking,
  );*/

  /*$grupo_seguimiento_nid=get_decision_seguimiento_default_value($node,$decision_nid);
  //print 'grupo_seguimiento_nid='.$grupo_seguimiento_nid.'<BR>';
  $form['grupo_seguimiento_nid'] = array(
  '#type' => 'select',
  '#title' => t('Working Group'),
  '#default_value' => $grupo_seguimiento_nid,
  '#options'=>my_get_grupo_seguimiento_options(),
  '#multiple'=>FALSE,
  //'#size'=>10,
  '#required' => FALSE
);*/

  /* $form['peso'] = array(
    '#type' => 'textfield',
    '#title' => t('Peso'),
    '#default_value' => $node->peso,
  );*/



 //gemini
 if(!isset($node->nid) || empty($node->nid)){
    drupal_set_title(t('Add Key Question'));
 }
 //

  return $form;
}

/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function informacion_validate($node, &$form) {
  //gemini-2014
  estrategia_inc_add_no_control_date_js();
  //  
  if (!validate_sel_decision($node)) {
    form_set_error('sel_decision', t('Select Decision is required'));
  }
}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function informacion_insert($node) {
  global $user;
  //$fecha=mktime();
  $origen_uid=$user->uid;
  $grupo_nid=0;
  $my_grupo=og_get_group_context(); 
  if(!empty($my_grupo) && isset($my_grupo->nid) && !empty($my_grupo->nid)){
	$grupo_nid=$my_grupo->nid; 
  }
  $empresa_nid=my_get_empresa_nid();
  $decision_nid=set_decision_seleccionado($node);
  $fecha_cumplimiento=my_mktime($node->fecha_cumplimiento);
  //
  //$sql=sprintf("INSERT INTO {informacion} (vid, nid, empresa_nid, origen_uid,grupo_nid,decision_nid,importancia,esfuerzo,grupo_seguimiento_nid,peso,accesibilidad) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $node->vid, $node->nid, $empresa_nid, $origen_uid,$grupo_nid,$decision_nid,$node->importancia,$node->esfuerzo, $node->grupo_seguimiento_nid, $node->peso,$node->accesibilidad);
  //$sql=sprintf("INSERT INTO {informacion} (vid, nid, empresa_nid, origen_uid,grupo_nid,decision_nid,importancia,esfuerzo,peso,accesibilidad) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $node->vid, $node->nid, $empresa_nid, $origen_uid,$grupo_nid,$decision_nid,$node->importancia,$node->esfuerzo, $node->peso,$node->accesibilidad);
  $sql=sprintf("INSERT INTO {informacion} (vid, nid, empresa_nid, origen_uid,grupo_nid,decision_nid,importancia,esfuerzo,peso,accesibilidad,fecha_cumplimiento,no_control_date) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d,%d)", $node->vid, $node->nid, $empresa_nid, $origen_uid,$grupo_nid,$decision_nid,$node->importancia,$node->esfuerzo, $node->peso,$node->accesibilidad,$fecha_cumplimiento,$node->no_control_date);
  
  db_query($sql);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function informacion_update($node) {
  $fecha_cumplimiento=my_mktime($node->fecha_cumplimiento);   
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    informacion_insert($node);
  }
  else {
    $decision_nid=set_decision_seleccionado($node);
    //db_query("UPDATE {informacion} SET importancia = %d,esfuerzo =%d, grupo_seguimiento_nid= %d, peso = %d, accesibilidad = %d, decision_nid = %d WHERE vid = %d",$node->importancia,$node->esfuerzo,$node->grupo_seguimiento_nid, $node->peso,$node->accesibilidad,$decision_nid,$node->vid);
    //db_query("UPDATE {informacion} SET importancia = %d,esfuerzo =%d, peso = %d, accesibilidad = %d, decision_nid = %d WHERE vid = %d",$node->importancia,$node->esfuerzo,$node->peso,$node->accesibilidad,$decision_nid,$node->vid);  
    db_query("UPDATE {informacion} SET importancia = %d,esfuerzo =%d, peso = %d, accesibilidad = %d, decision_nid = %d, fecha_cumplimiento = %d, no_control_date = %d WHERE vid = %d",$node->importancia,$node->esfuerzo,$node->peso,$node->accesibilidad,$decision_nid,$fecha_cumplimiento,$node->no_control_date,$node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function informacion_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {informacion} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from our table.
 */
function informacion_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {informacion} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function informacion_load($node) {
  //$sql=sprintf('SELECT i.nid as informacion_nid,i.vid as informacion_vid,i.empresa_nid,i.origen_uid,i.grupo_nid,i.decision_nid,i.importancia,i.esfuerzo,i.puntuacion_total,i.numero_ranking,i.grupo_seguimiento_nid,i.peso,i.accesibilidad FROM {informacion} i WHERE vid = %d', $node->vid);
  //$sql=sprintf('SELECT i.nid as informacion_nid,i.vid as informacion_vid,i.empresa_nid,i.origen_uid,i.grupo_nid,i.decision_nid,i.importancia,i.esfuerzo,i.puntuacion_total,i.numero_ranking,i.peso,i.accesibilidad FROM {informacion} i WHERE vid = %d', $node->vid);  
  $sql=sprintf('SELECT i.nid as informacion_nid,i.vid as informacion_vid,i.empresa_nid,i.origen_uid,i.grupo_nid,i.decision_nid,i.importancia,i.esfuerzo,i.puntuacion_total,i.numero_ranking,i.peso,i.accesibilidad,i.fecha_cumplimiento,i.no_control_date FROM {informacion} i WHERE vid = %d', $node->vid);
  $additions = db_fetch_object(db_query($sql));
  if(isset($additions->informacion_nid) && !empty($additions->informacion_nid)){
      $additions->grupo_seguimiento_link=get_informacion_grupo_seguimiento_link($additions->grupo_seguimiento_nid,$additions->decision_nid);
      $additions->fecha_cumplimiento=set_date_array($additions->fecha_cumplimiento);
      $additions->puntuacion_total=floor(get_informacion_puntuacion_total_formula($additions));
      $additions->importancia_name=get_eval_label($additions->importancia, 'importancia');
      $additions->accesibilidad_name=get_eval_label($additions->accesibilidad, 'accesibilidad');
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function informacion_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['myfield'] = array(
    '#value' => theme('informacion_order_info', $node),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function informacion_theme() {
  return array(
    'informacion_order_info' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish. We also wrap the default
 * presentation in a CSS class that is prefixed by the module name. This
 * way, style sheets can modify the output without requiring theme code.
 */
function theme_informacion_order_info($node) {
  $output = '<div class="informacion_order_info">';
  $output .= t('The order is for %quantity %color items.', array('%quantity' => check_plain($node->quantity), '%color' => check_plain($node->color)));
  $output .= '</div>';
  return $output;
}

/**
 * @} End of "defgroup informacion".
 */
 
//gemini
function informacion_block($op = 'list', $delta = 0, $edit = array()) {
 	switch ($op) {
    	case 'list':
 			$blocks[700]['info'] = t('Key Questions');
			return $blocks;
			break;
		case 'view':
			$block=my_informacion_view_block($delta);
   			return $block;
		default:
			break;
	}
}

//gemini
function my_informacion_view_block($delta){
	$block=array();
	switch($delta){
		case 700:
			if(user_access('Ver informacion_list')){
                            $title=t('Key Questions');
                            $icono=get_informacion_simbolo_img(0,$title);
                            $block['subject'] = $icono.$title;                            
                            $block['content'] = get_gestionar_informacion_content();
                        }
			break;
		default:
			break;	 
 	}
    return $block;
}
//gemini
function get_gestionar_informacion_content(){
    if(!repase_access(1)){
        return '';
    }
    $is_return=1;
    if(!hontza_grupo_shared_active_tabs_access($is_return)){
        return '';
    }
	$decision_nid=my_get_informacion_decision_nid();
        if(empty($decision_nid)){
            $decision_nid='todas';
        }
	$result=array();
        if(informacion_is_admin_content()){
             //intelsat-2015
            $icono=my_get_icono_action('add_left',t('Add Key Question')).'&nbsp;';
            $result[]=$icono.l(t('Add Key Question'),'node/add/informacion/'.$decision_nid);
        }
        if($decision_nid!='todas'){
            $result[]=l(t('My decision'),'node/'.$decision_nid);
        }
        $result[]=l(t('List of Key Questions'),'informaciones/'.$decision_nid);
	/*$result[]=l(t('Estrategia-Fuentes'),'estrategias/tabla');
        $result[]=l(t('Strategy-Groups'),'estrategias/arbol');*/
	return implode('<BR>',$result);
}
//gemini
function is_informacion_left(){
	if(is_informacion()){
		return 1;
	}
	$node=my_get_node();
	//echo print_r($node,1);exit();
	if(!empty($node) && isset($node->nid) && !empty($node->nid) && strcmp(arg(2),'edit')==0){
		//if(in_array($node->type,array('item'))){
		if(strcmp($node->type,'informacion')==0){			
			return 1;
		}
	}
	
	if(is_ficha_node_left('informacion','informacion')){
		return 1;
	}			
	return 0;
}
//gemini
function add_js_informacion(){
	if(is_informacion()){
		my_add_active_trail_js('id_a_estrategia');		
	}
}
//gemini
function is_informacion(){
	if(strcmp(arg(0),'informacion')==0){
		return 1;
	}
	if(strcmp(arg(0),'informaciones')==0){
		return 1;
	}
	if(is_ficha_node('informacion')){
		return 1;
	}	
	return 0;
}
//gemini
function my_class_primera_informacion($node,$page){
	if(empty($page) && is_node_primera_ayuda($node,array('informacion'))){
		return ' my_primera_noticia';
	}
	return '';
}
//gemini
function my_help_primera_informacion($node){
	if(is_node_primera_ayuda($node,array('informacion'))){
		if(is_add_primera_proyecto(0,'informacion')){
			$my_is_mouse_over=1;
			//$my_is_mouse_over=0;
			//return help_popup_window(13179, 'help',my_get_help_link_object(),0,0,2,$my_is_mouse_over);
			return help_popup_window('', 'help',my_get_help_link_object(),0,0,3,$my_is_mouse_over);
		}
	}	
	return '';
}
//gemini
function my_get_informacion_decision_nid(){
	$decision_nid='';
	if(strcmp(arg(0),'informaciones')==0){
		return arg(1);
	}	
	if(strcmp(arg(0),'node')==0){
		if(strcmp(arg(1),'add')==0 && strcmp(arg(2),'informacion')==0 && is_numeric(arg(3))){
			return arg(3);
		}else{ 
			if(is_ficha_node('informacion')){
				$node=my_get_node();
				if(!empty($node) && isset($node->nid) && !empty($node->nid)){
					return $node->decision_nid;
				}
			}	
		}
	}
	return $decision_nid;
}
//gemini
function get_informacion_grupo_seguimiento_link($grupo_seguimiento_nid,$decision_nid){
     if(!empty($grupo_seguimiento_nid)){
        $result=get_grupo_seguimiento_link($grupo_seguimiento_nid);
        return $result;
    }
    //
    $decision=node_load($decision_nid);
    return get_decision_grupo_seguimiento_link($decision->grupo_seguimiento_nid,$decision->despliegue_nid);
}
//gemini
function get_informacion_seguimiento_default_value($node,$decision_nid){
    if(!empty($node->grupo_seguimiento_nid)){
        return $node->grupo_seguimiento_nid;
    }
    //
    $decision=node_load($decision_nid);
    return get_decision_seguimiento_default_value($decision,$decision->despliegue_nid);
}
function get_informacion_puntuacion_total_formula($additions){
    $r=0;
    $s=0;
    $d=0;
    $ii=0;
    $ia=0;
    //
    $decision=node_load($additions->decision_nid);
    $despliegue=node_load($decision->despliegue_nid);
    $estrategia=node_load($despliegue->estrategia_nid);
    //
    $r=$estrategia->valor_reto;
    $s=$despliegue->importancia_despliegue;
    $d=$decision->valor_decision;
    $ii=$additions->importancia;
    $ia=$additions->accesibilidad;
    //
    $puntuacion_total=$r*$s*$d*(($ii+$ia)/2);
    //print $d;
    return $puntuacion_total;
}
function create_informacion_guraso_fieldset($informacion_nid,$decision_nid,$node_decision_nid){
    $result=array(
    '#type'=>'fieldset',
    '#title'=>t('Select Decision'),
    //'#description'=>$description
    );

    $sel_decision_nid=$node_decision_nid;

    if(empty($informacion_nid)){
        $sel_decision_nid=$decision_nid;
    }

    $rows=get_sel_estrategia_arbol_rows(0);
    $rows=prepare_estrategia_arbol_by_pro($rows,3);
    //echo print_r($rows,1);
    if(count($rows)>0){
        foreach($rows as $i=>$r){
            //echo print_r($r,1);
            $pro=$r['my_level'];
            //print $pro.'<BR>';
            if($pro==3){
                $result[$r['nid']] = array(
                '#required' => TRUE,
                '#type' => 'checkbox',
                '#prefix' => '<div class=taxo'. ($pro-1) .'>',
                '#suffix' => '</div>',
                '#title' => $r['title']
              );
              if(!empty($sel_decision_nid) && $r['nid']==$sel_decision_nid){
                     $result[$r['nid']]['#attributes']=array('checked' => 'checked');
              }
            }else if($pro==2){
              $result['my_estrategia_'.$r['nid']]['#value']='<div class=taxo'. ($pro-1) .'>'.get_despliegue_simbolo_img().$r['title'].'</div>';
            }else{
              $result['my_estrategia_'.$r['nid']]['#value']='<div class=taxo'. ($pro-1) .'>'.get_estrategia_simbolo_img().$r['title'].'</div>';
            }
        }
    }

    $keys=array_keys($result);
    $keys=get_numeric_values($keys);
    add_js_txek_sel_idea($keys);

    return $result;
}
function validate_sel_decision($node){

        $decision_nid=set_decision_seleccionado($node);
        if(empty($decision_nid)){
            return 0;
        }
        return 1;

}
function set_decision_seleccionado($node){
    return set_idea_seleccionada($node);
}
function get_informacion_simbolo_img($is_taula_header=0,$title=''){
    //intelsat-2016
    global $base_url;
    $html=array();
    //gemini-2014
    $style=estrategia_get_simbolo_style($is_taula_header); 
    //
    $html[]='<img '.$style.' src="'.$base_url.'/sites/default/files/my_images/informacion.png" alt="'.$title.'" title="'.$title.'"/>';
    if(!$is_taula_header){
        $html[]='&nbsp;';
    }
    return implode('',$html);
}
function get_title_informacion_simbolo_img(){
    //intelsat-2016
    global $base_url;
    $html=array();
    $html[]='<img src="'.$base_url.'/sites/default/files/my_images/informacion_title.png"/>';
    return implode('',$html);
}
function my_help_informacion(){
    $param=arg(1);
    //
    if(strcmp(arg(0),'node')==0 && strcmp(arg(1),'add')==0 && strcmp(arg(2),'informacion')==0){
        return help_popup_window(15317, 'help',my_get_help_link_object());
    }else if(strcmp(arg(0),'informaciones')==0 && (empty($param) || strcmp(arg(1),'todas')==0) || is_numeric($param)){
        //return help_popup_window(15318, 'help',my_get_help_link_object());
        return help_informacion_list();
    }
    //
    return '';
}
function help_informacion_list(){
     return help_popup_window(15318, 'help',my_get_help_link_object());
}
function informacion_is_admin_content(){
    return estrategia_is_admin_content();
}
function informacion_get_status_color($node){    
    return estrategia_get_status_color($node);
}
function informacion_delete_link($node){
    return hontza_item_delete_link($node);
}
function informacion_node_delete_confirm_form_alter(&$form,&$form_state,$form_id){
    $form['#redirect']='informaciones/todas';
}
function informacion_get_array($is_agrupar_por_estrategia=1,$is_valor_order=0){
    /*$result=array();
    $sql=informacion_define_list_sql();
    $res=db_query($sql);
    $kont=0;
    while($row=db_fetch_object($res)){
        $node=node_load($row->nid);
        $result[$kont]=$node;
        $kont++;
    }*/
    
    $result=informacion_get_informacion_en_orden_de_despliegue_estrategico();
                
    if(estrategia_resumen_preguntas_clave_canales_is_order_importance() || $is_valor_order){
      $is_numeric=1;
      $result=array_ordenatu($result, 'puntuacion_total', 'desc', $is_numeric);
    }/*else{  
        //if($is_agrupar_por_estrategia && !empty($result)){
            //$ordenado=array();
            //$estrategia_array=estrategia_tabla_callback(0);
            //$estrategia_array=estrategia_get_despliegue_estrategico_array();
            foreach($estrategia_array as $i=>$estrategia){
                foreach($result as $i=>$r){
                    $estrategia_informacion=informacion_get_estrategia($r);
                    if($estrategia_informacion->nid==$estrategia->nid){
                        $ordenado[]=$r;
                    }
                }
            }
            //return $ordenado;
        //}
    }*/
    return $result;
}
function informacion_define_list_sql($is_calendario=0,$time_ini='',$time_end=''){
  $sql='';  
  $where=array();
  //
  $where[]='n.promote = 1';
  $where[]='n.status = 1';
  $where[]='n.type="informacion"';
  if($is_calendario){
    $where[]='i.fecha_cumplimiento>='.$time_ini.' AND i.fecha_cumplimiento<='.$time_end.' AND i.no_control_date!=1';
  }
  //
  //$my_grupo=og_get_group_context(); 
  //if(!empty($my_grupo) && isset($my_grupo->nid) && !empty($my_grupo->nid)){
  //	$where[]='e.grupo_nid='.$my_grupo->nid;
  //}
  $empresa_nid=my_get_empresa_nid();
  //print 'oportunidad_nid(list)='.$oportunidad_nid.'<BR>';
  //if(!empty($empresa_nid)){
  //	$where[]='i.empresa_nid='.$empresa_nid;
  //}
  //
  $num_rows = FALSE;
  //if(!empty($empresa_nid) || $user->uid==1){
  if(is_where_estrategia_por_grupo()){
      $where_grupo=get_where_estrategia_por_grupo("de","informacion");
      if(!empty($where_grupo)){
          $where[]=$where_grupo;
      }
      $decision_nid=my_get_informacion_decision_nid();
      //print 'idea_nid(list)='.$idea_nid.'<BR>';
      if(!empty($decision_nid) && $decision_nid!='todas'){
            $where[]='i.decision_nid='.$decision_nid;
      }
      //$order_by=' ORDER BY n.sticky DESC, n.created DESC';
      //$order_by=' ORDER BY n.sticky DESC, n.created ASC';
      //$order_by=' ORDER BY i.peso ASC,n.sticky DESC, n.created ASC';
      $order_by=' ORDER BY i.importancia ASC,n.sticky DESC, n.created ASC';
      //
      $sql='SELECT n.nid, n.sticky, n.created
      FROM {node} n
      LEFT JOIN {informacion} i ON n.nid=i.nid
      LEFT JOIN {decision} decision ON i.decision_nid=decision.nid
      LEFT JOIN {despliegue} de ON decision.despliegue_nid=de.nid
      WHERE '.implode(' AND ',$where).$order_by;
  }     
 return $sql;
}
function informacion_get_canal_informacion_array($canal_nid,$informacion_nid=''){
    $result=array();
                        $where=array();
                        $where[]="1";
                        if(!empty($canal_nid)){
                            $where[]="ce.nid=".$canal_nid;
                        }
                        if(!empty($informacion_nid)){
                            $where[]="responde_informacion_nid=".$informacion_nid;
                        }
                        $sql="SELECT ce.* 
                        FROM {node} n 
                        LEFT JOIN {canal_estrategia} ce ON n.vid=ce.vid WHERE ".implode(" AND ",$where)." ORDER BY n.title ASC";
                        
            $res=db_query($sql);
            
            while($row=db_fetch_object($res)){
                
                $result[]=$row;
            }
            return $result;
}
function informacion_list_camino_text($node){
        $result=array();
        $decision_nid=$node->decision_nid;
        //
        if(!empty($decision_nid)){
            $decision=node_load($decision_nid);
            if(isset($decision->nid) && !empty($decision->nid)){                
                $despliegue=node_load($decision->despliegue_nid);
                if(isset($despliegue->nid) && !empty($despliegue->nid)){
                    $estrategia=node_load($despliegue->estrategia_nid);
                    if(isset($estrategia->nid) && !empty($estrategia->nid)){
                        $result[]=$estrategia->title;
                        $result[]="\t".$despliegue->title;
                        $result[]="\t\t".$decision->title;
                        $result[]="\t\t\t".informacion_substr_camino_title($node->title);
                    }    
                }
            }
        }
        return implode("\n",$result);
}
function informacion_substr_camino_title($title){
    $max=70;
    $len=strlen($title);
    if($len>=$max){
        $result=substr($title,0,$max).' ...';
        return $result;
    }
    return $title;
}
function informacion_get_estrategia($node){
        $decision_nid=$node->decision_nid;
        //
        if(!empty($decision_nid)){
            $decision=node_load($decision_nid);
            if(isset($decision->nid) && !empty($decision->nid)){                
                $despliegue=node_load($decision->despliegue_nid);
                if(isset($despliegue->nid) && !empty($despliegue->nid)){
                    $estrategia=node_load($despliegue->estrategia_nid);
                    if(isset($estrategia->nid) && !empty($estrategia->nid)){
                        return $estrategia;
                    }    
                }
            }
        }
        return '';
}
function informacion_get_pos($informacion_array,$nid){
    if(!empty($informacion_array)){
        foreach($informacion_array as $i=>$informacion){
            if($informacion->nid==$nid){
                return $i;
            }
        }
    }
    return 0;
}
function informacion_get_all_array(){
    return get_all_nodes(array('informacion'));
}
function informacion_get_informacion_en_orden_de_despliegue_estrategico(){
    $result=array();
    $despliegue_estrategico=estrategia_get_despliegue_estrategico_info();
    $informacion_nid_array=$despliegue_estrategico['informacion_list'];
    if(!empty($informacion_nid_array)){
        foreach($informacion_nid_array as $i=>$informacion_nid){
            $informacion=node_load($informacion_nid);
            if(isset($informacion->nid) && !empty($informacion->nid)){
                $result[]=$informacion;
            }
        }
    }
    return $result;
}
function informacion_edit_link($node){
    return hontza_item_edit_link($node);
}
function informacion_comment_link($node){
    return hontza_item_comment_link($node);
}
function informacion_add_link($node){
    $label=t('Add key Question');
    $label='';
    return l($label,'node/add/informacion/'.$node->nid,array('attributes'=>array('title'=>t('Add key Question'),'alt'=>t('Add key Question'))));
}
//gemini-2014
function informacion_delete_all($grupo_nid){
    $informacion_array=informacion_get_grupo_all($grupo_nid);
    if(!empty($informacion_array)){
        foreach($informacion_array as $i=>$row){
            node_delete($row->nid);
        }
    }
}
//gemini-2014
function informacion_get_grupo_all($grupo_nid){
    $result=array();
    if(!empty($grupo_nid)){
        $where=array();
        $where[]='1';
        //$where[]='(i.grupo_nid='.$grupo_nid.' OR i.grupo_seguimiento_nid='.$grupo_nid.')';
        $where[]='i.grupo_nid='.$grupo_nid;
        $where[]='n.type="informacion"';
        $sql='SELECT n.* 
        FROM {node} n 
        LEFT JOIN {informacion} i ON n.vid=i.vid
        WHERE '.implode(' AND ',$where);
        $res=db_query($sql);
        while($row=db_fetch_object($res)){
            $result[]=$row;
        }
    }
    return $result;
}
//gemini-2014
function informacion_exist($title,$grupo_nid,$decision,&$node){
    $where=array();
    $where[]='1';
    $where[]='i.grupo_nid='.$grupo_nid;
    $where[]='n.type="informacion"';
    $where[]='n.title="'.$title.'"';
    $sql='SELECT n.* 
    FROM {node} n 
    LEFT JOIN {informacion} i ON n.vid=i.vid 
    WHERE '.implode(' AND ',$where);
    $res=db_query($sql);
    while($row=db_fetch_object($res)){
        $node=node_load($row->nid);
        if(isset($node->nid) && !empty($node->nid)){
            if(isset($node->decision_nid) && !empty($node->decision_nid)){
                if($node->decision_nid==$decision->nid){
                    return 1;
                }    
            }    
        }    
    }
    $node=new stdClass();
    return 0;
}
//gemini-2014
function informacion_get_fecha_cumplimiento_default($fecha_cumplimiento,$decision_nid){
    if(empty($fecha_cumplimiento) || estrategia_is_fecha_cumplimiento_cero($fecha_cumplimiento)){
        if(!empty($decision_nid)){
            $decision=node_load($decision_nid);
            if(isset($decision->nid) && !empty($decision->nid)){
                return $decision->fecha_cumplimiento;
            }
        }else{
            return estrategia_define_fecha_cumplimiento('');
        }    
    }
    return $fecha_cumplimiento;
}
//gemini-2014
function informacion_get_no_control_date_label($no_control_date){
    $result=t('No');
    if(!empty($no_control_date)){
        $result=t('Yes');
    }
    return $result;
}
//gemini-2014
function informacion_get_no_control_date_default($nid,$no_control_date,$decision_nid){
    if(empty($nid)){
        if(!empty($decision_nid)){
            $decision=node_load($decision_nid);
            if(isset($decision->nid) && !empty($decision->nid)){
                //echo print_r($estrategia->fecha_cumplimiento,1).'<BR>';
                return $decision->no_control_date;
            }
        }   
    }
    return $no_control_date;
}